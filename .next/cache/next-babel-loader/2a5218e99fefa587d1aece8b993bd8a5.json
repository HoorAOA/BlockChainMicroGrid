{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component } from 'react';\nimport { Card, Button } from 'semantic-ui-react';\nimport factory from '../ethereum/factory';\nimport Layout from '../components/Layout';\nimport { Link } from '../routes';\nimport Exchange from '../ethereum/exchange';\nimport web3 from '../ethereum/web3'; // export default () => {\n//     return <h1>This is the index page</h1>;\n// };\n\nclass ExchangeIndex extends Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      units: '',\n      price: '',\n      manager: '',\n      loading: false,\n      errorMessage: '' // cardsItems: {}\n\n    });\n\n    _defineProperty(this, \"onSubmit\", async (event, id) => {\n      // event.preventDefault();\n      console.log(id.target.parentNode.id);\n      const indexofButtton = parseInt(id.target.parentNode.id); // this.state.indexofButtton = id.target.id;\n\n      const exchange = Exchange(this.props.TheAddress);\n      const {\n        price\n      } = this.props.requests[indexofButtton]; // this.setState({loading: true, errorMessage: ''});\n\n      await ethereum.enable();\n      const accounts = await web3.eth.getAccounts();\n      await exchange.methods.contribute().send({\n        from: accounts[0],\n        value: parseInt(price)\n      });\n    });\n\n    _defineProperty(this, \"onFinalize\", async (event, id) => {\n      // event.preventDefault();\n      console.log(id.target.parentNode.id);\n      const indexofButtton = parseInt(id.target.parentNode.id); // this.state.indexofButtton = id.target.id;\n\n      const exchange = Exchange(this.props.TheAddress); // this.setState({loading: true, errorMessage: ''});\n\n      await ethereum.enable();\n      const accounts = await web3.eth.getAccounts();\n      await exchange.methods.finalizeRequest(indexofButtton).send({\n        from: accounts[0]\n      });\n    });\n  }\n\n  static async getInitialProps() {\n    const AllExchanges = await factory.methods.getDeployedExchanges().call(); // console.log(AllExchanges);\n\n    var requests = [];\n    var TheAddress = '';\n\n    if (AllExchanges.length != 0) {\n      TheAddress = AllExchanges[0];\n      const exchange = Exchange(AllExchanges[0]);\n      const requestCount = await exchange.methods.getRequestsCount().call();\n      requests = await Promise.all(Array(parseInt(requestCount)).fill().map((element, index) => {\n        return exchange.methods.exchangeRequests(index).call();\n      }));\n    }\n\n    return {\n      AllExchanges,\n      requests,\n      TheAddress\n    };\n  }\n\n  renderCard() {\n    var account0;\n    web3.eth.getAccounts().then(function (result) {\n      account0 = result[0];\n    });\n    console.log(account0);\n\n    if (this.props.AllExchanges.length != 0) {\n      const items = this.props.requests.map((request, index) => {\n        if (account0 == request.manager) {\n          return {\n            header: request.units + ' Kw | ' + request.price + ' wei',\n            description: __jsx(\"div\", null, __jsx(\"div\", {\n              class: \"ui inverted divider\"\n            }), __jsx(\"div\", {\n              className: \"ui basic buttons\",\n              id: index\n            }, __jsx(Button, {\n              disabled: request.complete,\n              color: \"blue\",\n              basic: true,\n              floated: \"right\",\n              onClick: this.onFinalize.bind(this, {\n                index\n              })\n            }, \"Finalize\")), \" \"),\n            meta: 'Owner: ' + request.manager,\n            fluid: true,\n            style: {\n              width: '500px'\n            }\n          };\n        } else {\n          return {\n            header: request.units + ' Kw | ' + request.price + ' wei',\n            description: __jsx(\"div\", null, __jsx(\"div\", {\n              class: \"ui inverted divider\"\n            }), __jsx(\"div\", {\n              className: \"ui basic buttons\",\n              id: index\n            }, __jsx(Button, {\n              color: \"green\",\n              basic: true,\n              floated: \"right\",\n              onClick: this.onSubmit.bind(this, {\n                index\n              })\n            }, \"Buy\")), \" \"),\n            meta: 'Owner: ' + request.manager,\n            fluid: true,\n            style: {\n              width: '500px'\n            }\n          };\n        }\n      }); // const cardsItems = await Promise.all(items).then((values) => {\n      //     console.log(values);\n      //     return values;\n      //   });\n      // this.setState({ cardsItems });\n\n      return __jsx(Card.Group, {\n        items: items\n      });\n    }\n  }\n\n  render() {\n    return __jsx(\"div\", null, __jsx(Layout, null, __jsx(\"h2\", null, \"Pending Exchanges\"), __jsx(Link, {\n      route: \"/Exchanges/new\"\n    }, __jsx(\"a\", null, __jsx(Button, {\n      content: \"Create new Exchange\",\n      icon: \"add\",\n      primary: true,\n      floated: \"right\"\n    }))), this.renderCard()));\n  }\n\n}\n\nexport default ExchangeIndex;","map":{"version":3,"sources":["C:/Users/toshiba/Desktop/BlockChainMicroGrid/pages/index.js"],"names":["React","Component","Card","Button","factory","Layout","Link","Exchange","web3","ExchangeIndex","units","price","manager","loading","errorMessage","event","id","console","log","target","parentNode","indexofButtton","parseInt","exchange","props","TheAddress","requests","ethereum","enable","accounts","eth","getAccounts","methods","contribute","send","from","value","finalizeRequest","getInitialProps","AllExchanges","getDeployedExchanges","call","length","requestCount","getRequestsCount","Promise","all","Array","fill","map","element","index","exchangeRequests","renderCard","account0","then","result","items","request","header","description","complete","onFinalize","bind","meta","fluid","style","width","onSubmit","render"],"mappings":"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","sourcesContent":["import React , {Component} from 'react';\r\nimport {Card , Button} from 'semantic-ui-react';\r\nimport factory from '../ethereum/factory';\r\nimport Layout from '../components/Layout';\r\nimport { Link } from '../routes';\r\nimport Exchange from '../ethereum/exchange';\r\nimport web3 from '../ethereum/web3';\r\n\r\n// export default () => {\r\n//     return <h1>This is the index page</h1>;\r\n// };\r\n\r\nclass ExchangeIndex extends Component {\r\n\r\n\r\n    static async getInitialProps(){\r\n        const AllExchanges = await factory.methods.getDeployedExchanges().call();\r\n        // console.log(AllExchanges);\r\n        var requests = [];\r\n        var TheAddress = '';\r\n        if (AllExchanges.length != 0 ){\r\n            TheAddress = AllExchanges[0];\r\n            const exchange = Exchange(AllExchanges[0]);\r\n            const requestCount = await exchange.methods.getRequestsCount().call();\r\n\r\n            requests = await Promise.all(\r\n                Array(parseInt(requestCount)).fill().map((element, index) => {\r\n                    return exchange.methods.exchangeRequests(index).call()\r\n                })\r\n            );\r\n\r\n            \r\n        }\r\n        \r\n        \r\n        return { AllExchanges ,requests, TheAddress};\r\n        \r\n    }\r\n    \r\n    state = {\r\n        units: '',\r\n        price: '',\r\n        manager: '',\r\n        loading: false,\r\n        errorMessage:''\r\n        // cardsItems: {}\r\n    }\r\n\r\n    renderCard() {\r\n        \r\n        var account0;\r\n        web3.eth.getAccounts().then(function(result){\r\n          account0 = result[0];\r\n        })\r\n        console.log(account0);\r\n\r\n        if(this.props.AllExchanges.length != 0){\r\n        const items = this.props.requests.map( (request, index) => {\r\n            \r\n            if(account0 == request.manager){\r\n                return {\r\n                    header: request.units + ' Kw | ' + request.price + ' wei' ,\r\n                        description: \r\n                        <div>\r\n                        <div class=\"ui inverted divider\"></div>\r\n                        <div className='ui basic buttons' id={index}>\r\n                        <Button disabled={request.complete} \r\n                            color= \"blue\"\r\n                            basic \r\n                            floated=\"right\"\r\n                            onClick={this.onFinalize.bind(this, {index})}> \r\n                            Finalize\r\n                        </Button></div> </div>,\r\n                        meta: 'Owner: ' + request.manager ,\r\n                        fluid: true,\r\n                        style: {width:'500px'}\r\n                    };\r\n            }\r\n            else\r\n            {\r\n                return {\r\n                    header: request.units + ' Kw | ' + request.price + ' wei' ,\r\n                        description: \r\n                        <div>\r\n                        <div class=\"ui inverted divider\"></div>\r\n                        <div className='ui basic buttons' id={index}>\r\n                        <Button   \r\n                            color= \"green\"\r\n                            basic \r\n                            floated=\"right\"\r\n                            onClick={ this.onSubmit.bind(this, {index})}> \r\n                            Buy\r\n                        </Button></div> </div>,\r\n                        meta: 'Owner: ' + request.manager ,\r\n                        fluid: true,\r\n                        style: {width:'500px'}\r\n                    };\r\n            }\r\n            \r\n            });\r\n            \r\n            // const cardsItems = await Promise.all(items).then((values) => {\r\n            //     console.log(values);\r\n            //     return values;\r\n            //   });\r\n    \r\n        // this.setState({ cardsItems });\r\n        \r\n        return <Card.Group items={items} />\r\n     }\r\n    }\r\n\r\n    onSubmit = async (event, id) => {\r\n        // event.preventDefault();\r\n        console.log(id.target.parentNode.id);\r\n        const indexofButtton = parseInt(id.target.parentNode.id);\r\n        // this.state.indexofButtton = id.target.id;\r\n        const exchange = Exchange(this.props.TheAddress);\r\n\r\n        const {price} = this.props.requests[indexofButtton];\r\n        \r\n        // this.setState({loading: true, errorMessage: ''});\r\n\r\n            await ethereum.enable();\r\n            const accounts = await web3.eth.getAccounts();\r\n            \r\n            await exchange.methods.contribute().send({\r\n                from : accounts[0],\r\n                value : parseInt(price)\r\n            });\r\n\r\n    }\r\n\r\n    onFinalize = async (event, id) => {\r\n        // event.preventDefault();\r\n        console.log(id.target.parentNode.id);\r\n        const indexofButtton = parseInt(id.target.parentNode.id);\r\n        // this.state.indexofButtton = id.target.id;\r\n        const exchange = Exchange(this.props.TheAddress);\r\n\r\n\r\n        // this.setState({loading: true, errorMessage: ''});\r\n\r\n            await ethereum.enable();\r\n            const accounts = await web3.eth.getAccounts();\r\n            \r\n\r\n            await exchange.methods.finalizeRequest(indexofButtton).send({\r\n                from : accounts[0]\r\n            });\r\n    \r\n    }\r\n\r\n\r\n    render() {\r\n    return <div>\r\n        <Layout>\r\n\r\n            <h2>Pending Exchanges</h2>\r\n            <Link route=\"/Exchanges/new\">\r\n                <a>\r\n                    <Button \r\n                        content='Create new Exchange' \r\n                        icon='add' \r\n                        primary \r\n                        floated=\"right\" \r\n                    />\r\n                </a>\r\n            </Link>\r\n            {/* <Card.Group items={this.state.cardsItems}/> */}\r\n               {this.renderCard()}\r\n                \r\n        </Layout>\r\n        </div>;\r\n    }\r\n}\r\n\r\nexport default ExchangeIndex;"]},"metadata":{},"sourceType":"module"}