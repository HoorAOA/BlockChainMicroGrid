{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport { Button, Table } from 'semantic-ui-react';\nimport { Link } from '../../routes';\nimport Layout from '../../components/Layout';\nimport Exchange from '../../ethereum/exchange';\nimport RequestRow from '../../components/ExchangeRow';\nimport factory from '../../ethereum/factory';\n\nvar ExchangeIndex = /*#__PURE__*/function (_Component) {\n  _inherits(ExchangeIndex, _Component);\n\n  var _super = _createSuper(ExchangeIndex);\n\n  function ExchangeIndex() {\n    _classCallCheck(this, ExchangeIndex);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(ExchangeIndex, [{\n    key: \"renderRows\",\n    value: function renderRows() {\n      var _this = this;\n\n      return this.props.exchanges.map(function (request, index) {\n        return __jsx(RequestRow, {\n          id: index,\n          key: index,\n          exchange: exchange,\n          address: _this.props.address\n        });\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var Header = Table.Header,\n          Row = Table.Row,\n          HeaderCell = Table.HeaderCell,\n          Body = Table.Body;\n      return __jsx(Layout, null, __jsx(\"h2\", null, \"My Exchanges List\"), __jsx(Link, {\n        route: \"/Exchanges/new\"\n      }, __jsx(\"a\", null, __jsx(Button, {\n        primary: true,\n        floated: \"right\",\n        style: {\n          marginBottom: 10\n        }\n      }, \"New Exchange\"))), __jsx(Table, null, __jsx(Header, null, __jsx(Row, null, __jsx(HeaderCell, null, \"#\"), __jsx(HeaderCell, null, \"Units (Kw)\"), __jsx(HeaderCell, null, \"Price (SDG)\"), __jsx(HeaderCell, null, \"Completed\"))), __jsx(Body, null, this.renderRows())), __jsx(\"div\", null, \"Found \", this.props.exchangesCount, \" Exchanges.\"));\n    }\n  }], [{\n    key: \"getInitialProps\",\n    value: function () {\n      var _getInitialProps = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(props) {\n        var address, exchangeFactory, exchangesCount, exchanges;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                address = props.query.address; // const exchange = Exchange(address);\n\n                exchangeFactory = factory(address);\n                _context.next = 4;\n                return factory.methods.getExchangesCount().call();\n\n              case 4:\n                exchangesCount = _context.sent;\n                _context.next = 7;\n                return Promise.all(Array(parseInt(exchangesCount)).fill().map(function (element, index) {\n                  return exchangeFactory.methods.getDeployedExchanges(index).call();\n                }));\n\n              case 7:\n                exchanges = _context.sent;\n                console.log(exchanges);\n                return _context.abrupt(\"return\", {\n                  address: address,\n                  exchanges: exchanges,\n                  exchangesCount: exchangesCount\n                });\n\n              case 10:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      function getInitialProps(_x) {\n        return _getInitialProps.apply(this, arguments);\n      }\n\n      return getInitialProps;\n    }()\n  }]);\n\n  return ExchangeIndex;\n}(Component);\n\nexport default ExchangeIndex;","map":{"version":3,"sources":["C:/Users/toshiba/Desktop/BlockChainMicroGrid/pages/Exchanges/MyExchanges.js"],"names":["React","Component","Button","Table","Link","Layout","Exchange","RequestRow","factory","ExchangeIndex","props","exchanges","map","request","index","exchange","address","Header","Row","HeaderCell","Body","marginBottom","renderRows","exchangesCount","query","exchangeFactory","methods","getExchangesCount","call","Promise","all","Array","parseInt","fill","element","getDeployedExchanges","console","log"],"mappings":";;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,MAAT,EAAkBC,KAAlB,QAA8B,mBAA9B;AACA,SAASC,IAAT,QAAqB,cAArB;AACA,OAAOC,MAAP,MAAmB,yBAAnB;AACA,OAAOC,QAAP,MAAqB,yBAArB;AACA,OAAOC,UAAP,MAAuB,8BAAvB;AACA,OAAOC,OAAP,MAAoB,wBAApB;;IAEMC,a;;;;;;;;;;;;;iCAoBU;AAAA;;AACR,aAAO,KAAKC,KAAL,CAAWC,SAAX,CAAqBC,GAArB,CAAyB,UAACC,OAAD,EAAUC,KAAV,EAAoB;AAChD,eACI,MAAC,UAAD;AACI,UAAA,EAAE,EAAEA,KADR;AAEI,UAAA,GAAG,EAAEA,KAFT;AAGI,UAAA,QAAQ,EAAEC,QAHd;AAII,UAAA,OAAO,EAAE,KAAI,CAACL,KAAL,CAAWM;AAJxB,UADJ;AASH,OAVM,CAAP;AAWH;;;6BAEQ;AAAA,UACEC,MADF,GACoCd,KADpC,CACEc,MADF;AAAA,UACUC,GADV,GACoCf,KADpC,CACUe,GADV;AAAA,UACeC,UADf,GACoChB,KADpC,CACegB,UADf;AAAA,UAC2BC,IAD3B,GACoCjB,KADpC,CAC2BiB,IAD3B;AAEL,aACI,MAAC,MAAD,QACI,sCADJ,EAEI,MAAC,IAAD;AAAM,QAAA,KAAK;AAAX,SACI,iBACI,MAAC,MAAD;AAAQ,QAAA,OAAO,MAAf;AAAgB,QAAA,OAAO,EAAC,OAAxB;AAAgC,QAAA,KAAK,EAAE;AAACC,UAAAA,YAAY,EAAE;AAAf;AAAvC,wBADJ,CADJ,CAFJ,EAOI,MAAC,KAAD,QACI,MAAC,MAAD,QACI,MAAC,GAAD,QACI,MAAC,UAAD,YADJ,EAEI,MAAC,UAAD,qBAFJ,EAGI,MAAC,UAAD,sBAHJ,EAII,MAAC,UAAD,oBAJJ,CADJ,CADJ,EASI,MAAC,IAAD,QACK,KAAKC,UAAL,EADL,CATJ,CAPJ,EAoBJ,6BAAY,KAAKZ,KAAL,CAAWa,cAAvB,gBApBI,CADJ;AAwBH;;;;uGA3D4Bb,K;;;;;;AACjBM,gBAAAA,O,GAAYN,KAAK,CAACc,K,CAAlBR,O,EAER;;AACMS,gBAAAA,e,GAAkBjB,OAAO,CAACQ,OAAD,C;;uBAEFR,OAAO,CAACkB,OAAR,CAAgBC,iBAAhB,GAAoCC,IAApC,E;;;AAAvBL,gBAAAA,c;;uBAEkBM,OAAO,CAACC,GAAR,CACpBC,KAAK,CAACC,QAAQ,CAACT,cAAD,CAAT,CAAL,CAAgCU,IAAhC,GAAuCrB,GAAvC,CAA2C,UAACsB,OAAD,EAAUpB,KAAV,EAAoB;AAC3D,yBAAOW,eAAe,CAACC,OAAhB,CAAwBS,oBAAxB,CAA6CrB,KAA7C,EAAoDc,IAApD,EAAP;AACH,iBAFD,CADoB,C;;;AAAlBjB,gBAAAA,S;AAMNyB,gBAAAA,OAAO,CAACC,GAAR,CAAY1B,SAAZ;iDAEO;AAAEK,kBAAAA,OAAO,EAAPA,OAAF;AAAYL,kBAAAA,SAAS,EAATA,SAAZ;AAAuBY,kBAAAA,cAAc,EAAdA;AAAvB,iB;;;;;;;;;;;;;;;;;;;EAjBatB,S;;AA+D5B,eAAeQ,aAAf","sourcesContent":["import React, { Component } from 'react';\r\nimport { Button , Table} from 'semantic-ui-react';\r\nimport { Link } from '../../routes';\r\nimport Layout from '../../components/Layout';\r\nimport Exchange from '../../ethereum/exchange';\r\nimport RequestRow from '../../components/ExchangeRow';\r\nimport factory from '../../ethereum/factory';\r\n\r\nclass ExchangeIndex extends Component {\r\n    static async getInitialProps(props) {\r\n        const { address } = props.query;\r\n\r\n        // const exchange = Exchange(address);\r\n        const exchangeFactory = factory(address);\r\n\r\n        const exchangesCount = await factory.methods.getExchangesCount().call();\r\n\r\n        const exchanges = await Promise.all(\r\n            Array(parseInt(exchangesCount)).fill().map((element, index) => {\r\n                return exchangeFactory.methods.getDeployedExchanges(index).call()\r\n            })\r\n        );\r\n\r\n        console.log(exchanges);\r\n\r\n        return { address , exchanges, exchangesCount};\r\n    }\r\n\r\n    renderRows(){\r\n        return this.props.exchanges.map((request, index) => {\r\n            return (\r\n                <RequestRow \r\n                    id={index}\r\n                    key={index}\r\n                    exchange={exchange}\r\n                    address={this.props.address}\r\n                    \r\n                />\r\n            );\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const {Header, Row, HeaderCell, Body } = Table;\r\n        return (\r\n            <Layout>\r\n                <h2>My Exchanges List</h2>\r\n                <Link route={`/Exchanges/new`}>\r\n                    <a>\r\n                        <Button primary floated=\"right\" style={{marginBottom: 10}} >New Exchange</Button>                        \r\n                    </a>\r\n                </Link>\r\n                <Table>\r\n                    <Header>\r\n                        <Row>\r\n                            <HeaderCell>#</HeaderCell>\r\n                            <HeaderCell>Units (Kw)</HeaderCell>\r\n                            <HeaderCell>Price (SDG)</HeaderCell>\r\n                            <HeaderCell>Completed</HeaderCell>\r\n                        </Row>\r\n                    </Header>\r\n                    <Body>\r\n                        {this.renderRows()}\r\n                    </Body>\r\n                </Table>\r\n        <div>Found {this.props.exchangesCount} Exchanges.</div>\r\n            </Layout>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ExchangeIndex;"]},"metadata":{},"sourceType":"module"}