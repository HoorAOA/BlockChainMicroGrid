{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component } from 'react';\nimport { Card, Button } from 'semantic-ui-react';\nimport factory from '../ethereum/factory';\nimport Layout from '../components/Layout';\nimport { Link } from '../routes';\nimport Exchange from '../ethereum/exchange';\nimport exchange from '../ethereum/exchange'; // export default () => {\n//     return <h1>This is the index page</h1>;\n// };\n\nclass ExchangeIndex extends Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      units: '',\n      price: '',\n      manager: '',\n      loading: false,\n      errorMessage: '' // cardsItems: {}\n\n    });\n\n    _defineProperty(this, \"onSubmit\", async (event, id) => {\n      // event.preventDefault();\n      console.log(id.target.id);\n      const indexofButtton = parseInt(id.target.id); // this.state.indexofButtton = id.target.id;\n\n      const exchange = Exchange(this.props.address); // const { manager, units, price} = exchange;\n      // this.setState({loading: true, errorMessage: ''});\n\n      await ethereum.enable();\n      const accounts = await web3.eth.getAccounts();\n      await this.props.exchange.methods.finalizeRequest(indexofButtton).send({\n        from: accounts[0]\n      });\n      Router.pushRoute(`/`);\n    });\n  }\n\n  static async getInitialProps() {\n    const AllExchanges = await factory.methods.getDeployedExchanges().call();\n    console.log(AllExchanges);\n\n    if (AllExchanges.length != 0) {\n      const address = AllExchanges[0];\n      const exchange = Exchange(AllExchanges[0]);\n      const requestCount = await exchange.methods.getRequestsCount().call();\n      const requests = await Promise.all(Array(parseInt(requestCount)).fill().map((element, index) => {\n        return exchange.methods.exchangeRequest(index).call();\n      }));\n      return {\n        AllExchanges,\n        requests,\n        exchange,\n        address\n      };\n    }\n  }\n\n  renderCard() {\n    if (this.props.AllExchanges.length != 0) {\n      const items = this.props.requests.map((request, index) => {\n        // const exchange = Exchange(address);\n        // const summary = await exchange.methods.getSummary().call();\n        //     // console.log(summary);\n        return {\n          header: request.units + 'Kw | ' + request.price + 'wei',\n          description: __jsx(Button, {\n            disabled: request.complete,\n            loading: this.state.loading,\n            color: \"green\",\n            basic: true,\n            floated: \"right\",\n            id: index,\n            onClick: this.onSubmit.bind(this, {\n              index\n            })\n          }, \"BUY\"),\n          meta: 'Owner: ' + request.manager,\n          fluid: true\n        };\n      }); // const cardsItems = await Promise.all(items).then((values) => {\n      //     console.log(values);\n      //     return values;\n      //   });\n      // this.setState({ cardsItems });\n\n      return __jsx(Card.Group, {\n        items: items\n      });\n    }\n  }\n\n  render() {\n    return __jsx(\"div\", null, __jsx(Layout, null, __jsx(\"h2\", null, \"Pending Exchanges\"), __jsx(Link, {\n      route: \"/Exchanges/new\"\n    }, __jsx(\"a\", null, __jsx(Button, {\n      content: \"Create new Exchange\",\n      icon: \"add\",\n      primary: true,\n      floated: \"right\"\n    }))), this.renderCard()));\n  }\n\n}\n\nexport default ExchangeIndex;","map":{"version":3,"sources":["C:/Users/toshiba/Desktop/BlockChainMicroGrid/pages/index.js"],"names":["React","Component","Card","Button","factory","Layout","Link","Exchange","exchange","ExchangeIndex","units","price","manager","loading","errorMessage","event","id","console","log","target","indexofButtton","parseInt","props","address","ethereum","enable","accounts","web3","eth","getAccounts","methods","finalizeRequest","send","from","Router","pushRoute","getInitialProps","AllExchanges","getDeployedExchanges","call","length","requestCount","getRequestsCount","requests","Promise","all","Array","fill","map","element","index","exchangeRequest","renderCard","items","request","header","description","complete","state","onSubmit","bind","meta","fluid","render"],"mappings":"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","sourcesContent":["import React , {Component} from 'react';\r\nimport {Card , Button} from 'semantic-ui-react';\r\nimport factory from '../ethereum/factory';\r\nimport Layout from '../components/Layout';\r\nimport { Link } from '../routes';\r\nimport Exchange from '../ethereum/exchange';\r\nimport exchange from '../ethereum/exchange';\r\n\r\n// export default () => {\r\n//     return <h1>This is the index page</h1>;\r\n// };\r\n\r\nclass ExchangeIndex extends Component {\r\n\r\n    static async getInitialProps(){\r\n        const AllExchanges = await factory.methods.getDeployedExchanges().call();\r\n        console.log(AllExchanges);\r\n\r\n        if (AllExchanges.length != 0 ){\r\n            const address = AllExchanges[0];\r\n            const exchange = Exchange(AllExchanges[0]);\r\n            const requestCount = await exchange.methods.getRequestsCount().call();\r\n\r\n            const requests = await Promise.all(\r\n                Array(parseInt(requestCount)).fill().map((element, index) => {\r\n                    return exchange.methods.exchangeRequest(index).call()\r\n                })\r\n            );\r\n\r\n            return { AllExchanges ,requests , exchange, address};\r\n        }\r\n        \r\n        \r\n        \r\n    }\r\n    \r\n    state = {\r\n        units: '',\r\n        price: '',\r\n        manager: '',\r\n        loading: false,\r\n        errorMessage:''\r\n        // cardsItems: {}\r\n    }\r\n\r\n    renderCard() {\r\n        if(this.props.AllExchanges.length != 0){\r\n        const items = this.props.requests.map( (request, index) => {\r\n\r\n            // const exchange = Exchange(address);\r\n            // const summary = await exchange.methods.getSummary().call();\r\n            //     // console.log(summary);\r\n            return {\r\n                    header: request.units + 'Kw | ' + request.price + 'wei' ,\r\n                    description: \r\n                    <Button disabled={request.complete}  \r\n                        loading = {this.state.loading}\r\n                        color= \"green\"\r\n                        basic \r\n                        floated=\"right\"\r\n                        id={index}\r\n                        onClick={this.onSubmit.bind(this, {index})}> \r\n                        BUY\r\n                    </Button>\r\n                    ,\r\n                    meta: 'Owner: ' + request.manager ,\r\n                    fluid: true\r\n                };\r\n            });\r\n            \r\n            // const cardsItems = await Promise.all(items).then((values) => {\r\n            //     console.log(values);\r\n            //     return values;\r\n            //   });\r\n    \r\n        // this.setState({ cardsItems });\r\n\r\n        return <Card.Group items={items}/>\r\n        }\r\n     }\r\n\r\n    onSubmit = async (event, id) => {\r\n        // event.preventDefault();\r\n        console.log(id.target.id);\r\n        const indexofButtton = parseInt(id.target.id);\r\n        // this.state.indexofButtton = id.target.id;\r\n        const exchange = Exchange(this.props.address);\r\n        // const { manager, units, price} = exchange;\r\n\r\n        // this.setState({loading: true, errorMessage: ''});\r\n\r\n            await ethereum.enable();\r\n            const accounts = await web3.eth.getAccounts();\r\n            \r\n            await this.props.exchange.methods.finalizeRequest(indexofButtton).send({\r\n                from : accounts[0]\r\n            });\r\n    \r\n        Router.pushRoute(`/`);\r\n    }\r\n\r\n\r\n    render() {\r\n    return <div>\r\n        <Layout>\r\n\r\n            <h2>Pending Exchanges</h2>\r\n            <Link route=\"/Exchanges/new\">\r\n                <a>\r\n                    <Button \r\n                        content='Create new Exchange' \r\n                        icon='add' \r\n                        primary \r\n                        floated=\"right\" \r\n                    />\r\n                </a>\r\n            </Link>\r\n            {/* <Card.Group items={this.state.cardsItems}/> */}\r\n               {this.renderCard()}\r\n                \r\n        </Layout>\r\n        </div>;\r\n    }\r\n}\r\n\r\nexport default ExchangeIndex;"]},"metadata":{},"sourceType":"module"}