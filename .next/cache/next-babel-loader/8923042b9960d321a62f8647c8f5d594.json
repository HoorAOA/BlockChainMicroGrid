{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component } from 'react';\nimport { Card, Button } from 'semantic-ui-react';\nimport factory from '../ethereum/factory';\nimport Layout from '../components/Layout';\nimport { Link } from '../routes';\nimport Exchange from '../ethereum/exchange'; // export default () => {\n//     return <h1>This is the index page</h1>;\n// };\n\nclass ExchangeIndex extends Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      units: '',\n      price: '',\n      manager: '',\n      loading: false,\n      errorMessage: '',\n      cardsItems: {}\n    });\n\n    _defineProperty(this, \"onSubmit\", async event => {\n      event.preventDefault();\n      const exchange = Exchange(this.props.address); // const { manager, units, price} = exchange;\n\n      this.setState({\n        loading: true,\n        errorMessage: ''\n      });\n\n      try {\n        await ethereum.enable();\n        const accounts = await web3.eth.getAccounts();\n        await exchange.methods.FinalizeExchange(exchange).send({\n          from: accounts[0]\n        });\n        Router.pushRoute(`/`);\n      } catch (err) {\n        this.setState({\n          errorMessage: err.message\n        });\n      } finally {\n        this.setState({\n          loading: false\n        });\n      }\n    });\n  }\n\n  static async getInitialProps(props) {\n    const exchanges = await factory.methods.getDeployedExchanges().call();\n    const {\n      address\n    } = props.query;\n    return {\n      exchanges,\n      address\n    };\n  }\n\n  async componentDidMount() {\n    const items = this.props.exchanges.map(async address => {\n      const exchange = Exchange(address);\n      const summary = await exchange.methods.getSummary().call(); // console.log(summary);\n\n      return {\n        header: address,\n        description: __jsx(Button, {\n          disabled: exchange.complete,\n          loading: this.state.loading,\n          color: \"green\",\n          basic: true,\n          floated: \"right\",\n          onClick: this.onSubmit\n        }, \"BUY\"),\n        meta: summary[0] + 'Kw | ' + summary[1] + 'wei',\n        fluid: true\n      };\n    });\n    const cardsItems = await Promise.all(items).then(values => {\n      console.log(values);\n      return values;\n    });\n    this.setState({\n      cardsItems\n    });\n  }\n\n  render() {\n    return __jsx(\"div\", null, __jsx(Layout, null, __jsx(\"h2\", null, \"Pending Exchanges\"), __jsx(Link, {\n      route: \"/Exchanges/new\"\n    }, __jsx(\"a\", null, __jsx(Button, {\n      content: \"Create new Exchange\",\n      icon: \"add\",\n      primary: true,\n      floated: \"right\"\n    }))), __jsx(Card.Group, {\n      items: this.state.cardsItems\n    })));\n  }\n\n}\n\nexport default ExchangeIndex;","map":{"version":3,"sources":["C:/Users/toshiba/Desktop/BlockChainMicroGrid/pages/index.js"],"names":["React","Component","Card","Button","factory","Layout","Link","Exchange","ExchangeIndex","units","price","manager","loading","errorMessage","cardsItems","event","preventDefault","exchange","props","address","setState","ethereum","enable","accounts","web3","eth","getAccounts","methods","FinalizeExchange","send","from","Router","pushRoute","err","message","getInitialProps","exchanges","getDeployedExchanges","call","query","componentDidMount","items","map","summary","getSummary","header","description","complete","state","onSubmit","meta","fluid","Promise","all","then","values","console","log","render"],"mappings":"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","sourcesContent":["import React , {Component} from 'react';\r\nimport {Card , Button} from 'semantic-ui-react';\r\nimport factory from '../ethereum/factory';\r\nimport Layout from '../components/Layout';\r\nimport { Link } from '../routes';\r\nimport Exchange from '../ethereum/exchange';\r\n\r\n// export default () => {\r\n//     return <h1>This is the index page</h1>;\r\n// };\r\n\r\nclass ExchangeIndex extends Component {\r\n\r\n    static async getInitialProps(props){\r\n        const exchanges = await factory.methods.getDeployedExchanges().call();\r\n        const {address} = props.query;\r\n        \r\n        return { exchanges , address};\r\n    }\r\n    \r\n    state = {\r\n        units: '',\r\n        price: '',\r\n        manager: '',\r\n        loading: false,\r\n        errorMessage:'',\r\n        cardsItems: {}\r\n    }\r\n\r\n    async componentDidMount() {\r\n        const items = this.props.exchanges.map(async (address) => {\r\n\r\n            const exchange = Exchange(address);\r\n            const summary = await exchange.methods.getSummary().call();\r\n                // console.log(summary);\r\n            return {\r\n                    header: address,\r\n                    description: \r\n                    <Button disabled={exchange.complete}  \r\n                        loading = {this.state.loading}\r\n                        color= \"green\"\r\n                        basic \r\n                        floated=\"right\"\r\n                        onClick={this.onSubmit}> \r\n                        BUY\r\n                    </Button>\r\n                    ,\r\n                    meta:  summary[0] + 'Kw | ' + summary[1] + 'wei',\r\n                    fluid: true\r\n                };\r\n            });\r\n            \r\n            const cardsItems = await Promise.all(items).then((values) => {\r\n                console.log(values);\r\n                return values;\r\n              });\r\n    \r\n        this.setState({ cardsItems });\r\n     }\r\n\r\n    onSubmit = async event => {\r\n        event.preventDefault();\r\n\r\n        const exchange = Exchange(this.props.address);\r\n        // const { manager, units, price} = exchange;\r\n\r\n        this.setState({loading: true, errorMessage: ''});\r\n\r\n        try {\r\n            await ethereum.enable();\r\n            const accounts = await web3.eth.getAccounts();\r\n            await exchange.methods.FinalizeExchange(exchange).send({\r\n                from : accounts[0]\r\n            });\r\n    \r\n\r\n        Router.pushRoute(`/`)\r\n        } catch (err) {\r\n\r\n            this.setState({ errorMessage: err.message});\r\n        }\r\n        finally{\r\n\r\n            this.setState({ loading: false});\r\n        }\r\n    }\r\n\r\n\r\n    render() {\r\n    return <div>\r\n        <Layout>\r\n\r\n            <h2>Pending Exchanges</h2>\r\n            <Link route=\"/Exchanges/new\">\r\n                <a>\r\n                    <Button \r\n                        content='Create new Exchange' \r\n                        icon='add' \r\n                        primary \r\n                        floated=\"right\" \r\n                    />\r\n                </a>\r\n            </Link>\r\n            <Card.Group items={this.state.cardsItems}/>\r\n                \r\n                \r\n        </Layout>\r\n        </div>;\r\n    }\r\n}\r\n\r\nexport default ExchangeIndex;"]},"metadata":{},"sourceType":"module"}