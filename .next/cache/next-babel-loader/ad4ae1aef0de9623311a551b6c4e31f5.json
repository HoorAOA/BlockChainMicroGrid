{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport { Card, Button } from 'semantic-ui-react';\nimport factory from '../ethereum/factory';\nimport Layout from '../components/Layout';\nimport { Link } from '../routes';\nimport Exchange from '../ethereum/exchange'; // export default () => {\n//     return <h1>This is the index page</h1>;\n// };\n\nvar ExchangeIndex = /*#__PURE__*/function (_Component) {\n  _inherits(ExchangeIndex, _Component);\n\n  var _super = _createSuper(ExchangeIndex);\n\n  function ExchangeIndex() {\n    var _this;\n\n    _classCallCheck(this, ExchangeIndex);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      units: '',\n      price: '',\n      manager: '',\n      loading: false,\n      errorMessage: '' // cardsItems: {}\n\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onSubmit\", /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(event) {\n        var exchange, accounts;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                event.preventDefault();\n                console.log(_this.props.id);\n                exchange = Exchange(_this.props.address); // const { manager, units, price} = exchange;\n\n                _this.setState({\n                  loading: true,\n                  errorMessage: ''\n                });\n\n                _context.prev = 4;\n                _context.next = 7;\n                return ethereum.enable();\n\n              case 7:\n                _context.next = 9;\n                return web3.eth.getAccounts();\n\n              case 9:\n                accounts = _context.sent;\n                _context.next = 12;\n                return exchange.methods.FinalizeExchange(_this.props.id).send({\n                  from: accounts[0]\n                });\n\n              case 12:\n                Router.pushRoute(\"/\");\n                _context.next = 18;\n                break;\n\n              case 15:\n                _context.prev = 15;\n                _context.t0 = _context[\"catch\"](4);\n\n                _this.setState({\n                  errorMessage: _context.t0.message\n                });\n\n              case 18:\n                _context.prev = 18;\n\n                _this.setState({\n                  loading: false\n                });\n\n                return _context.finish(18);\n\n              case 21:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, null, [[4, 15, 18, 21]]);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }());\n\n    return _this;\n  }\n\n  _createClass(ExchangeIndex, [{\n    key: \"renderCard\",\n    value: function renderCard() {\n      var _this2 = this;\n\n      // if(this.props.AllExchanges != []){\n      var items = this.props.requests.map(function (request) {\n        // const exchange = Exchange(address);\n        // const summary = await exchange.methods.getSummary().call();\n        //     // console.log(summary);\n        return {\n          header: request.units + 'Kw | ' + request.price + 'wei',\n          description: __jsx(Button, {\n            disabled: request.complete,\n            loading: _this2.state.loading,\n            color: \"green\",\n            basic: true,\n            floated: \"right\",\n            onClick: _this2.onSubmit\n          }, \"BUY\"),\n          meta: 'Owner: ' + request.manager,\n          fluid: true\n        };\n      }); // const cardsItems = await Promise.all(items).then((values) => {\n      //     console.log(values);\n      //     return values;\n      //   });\n      // this.setState({ cardsItems });\n\n      return __jsx(Card.Group, {\n        items: items\n      }); // }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return __jsx(\"div\", null, __jsx(Layout, null, __jsx(\"h2\", null, \"Pending Exchanges\"), __jsx(Link, {\n        route: \"/Exchanges/new\"\n      }, __jsx(\"a\", null, __jsx(Button, {\n        content: \"Create new Exchange\",\n        icon: \"add\",\n        primary: true,\n        floated: \"right\"\n      }))), this.renderCard()));\n    }\n  }], [{\n    key: \"getInitialProps\",\n    value: function () {\n      var _getInitialProps = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        var AllExchanges, address, exchange, requestCount, requests;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return factory.methods.getDeployedExchanges().call();\n\n              case 2:\n                AllExchanges = _context2.sent;\n                console.log(AllExchanges); // if (!(AllExchanges == []) || !(AllExchanges == undefined)){\n\n                address = AllExchanges[0];\n                exchange = Exchange(address);\n                _context2.next = 8;\n                return exchange.methods.getRequestsCount().call();\n\n              case 8:\n                requestCount = _context2.sent;\n                _context2.next = 11;\n                return Promise.all(Array(parseInt(requestCount)).fill().map(function (element, index) {\n                  return exchange.methods.exchangeRequest(index).call();\n                }));\n\n              case 11:\n                requests = _context2.sent;\n                return _context2.abrupt(\"return\", {\n                  AllExchanges: AllExchanges,\n                  requests: requests,\n                  address: address\n                });\n\n              case 13:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      function getInitialProps() {\n        return _getInitialProps.apply(this, arguments);\n      }\n\n      return getInitialProps;\n    }()\n  }]);\n\n  return ExchangeIndex;\n}(Component);\n\nexport default ExchangeIndex;","map":{"version":3,"sources":["C:/Users/toshiba/Desktop/BlockChainMicroGrid/pages/index.js"],"names":["React","Component","Card","Button","factory","Layout","Link","Exchange","ExchangeIndex","units","price","manager","loading","errorMessage","event","preventDefault","console","log","props","id","exchange","address","setState","ethereum","enable","web3","eth","getAccounts","accounts","methods","FinalizeExchange","send","from","Router","pushRoute","message","items","requests","map","request","header","description","complete","state","onSubmit","meta","fluid","renderCard","getDeployedExchanges","call","AllExchanges","getRequestsCount","requestCount","Promise","all","Array","parseInt","fill","element","index","exchangeRequest"],"mappings":"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","sourcesContent":["import React , {Component} from 'react';\r\nimport {Card , Button} from 'semantic-ui-react';\r\nimport factory from '../ethereum/factory';\r\nimport Layout from '../components/Layout';\r\nimport { Link } from '../routes';\r\nimport Exchange from '../ethereum/exchange';\r\n\r\n// export default () => {\r\n//     return <h1>This is the index page</h1>;\r\n// };\r\n\r\nclass ExchangeIndex extends Component {\r\n\r\n    static async getInitialProps(){\r\n        const AllExchanges = await factory.methods.getDeployedExchanges().call();\r\n        console.log(AllExchanges);\r\n        // if (!(AllExchanges == []) || !(AllExchanges == undefined)){\r\n           const address = AllExchanges[0];\r\n            const exchange = Exchange(address);\r\n            const requestCount = await exchange.methods.getRequestsCount().call();\r\n\r\n            const requests = await Promise.all(\r\n                Array(parseInt(requestCount)).fill().map((element, index) => {\r\n                    return exchange.methods.exchangeRequest(index).call()\r\n                })\r\n            );\r\n            return { AllExchanges ,requests , address};\r\n        // }\r\n        \r\n\r\n        \r\n    }\r\n    \r\n    state = {\r\n        units: '',\r\n        price: '',\r\n        manager: '',\r\n        loading: false,\r\n        errorMessage:''\r\n        // cardsItems: {}\r\n    }\r\n\r\n    renderCard() {\r\n        // if(this.props.AllExchanges != []){\r\n        const items = this.props.requests.map( (request) => {\r\n\r\n            // const exchange = Exchange(address);\r\n            // const summary = await exchange.methods.getSummary().call();\r\n            //     // console.log(summary);\r\n            return {\r\n                    header: request.units + 'Kw | ' + request.price + 'wei' ,\r\n                    description: \r\n                    <Button disabled={request.complete}  \r\n                        loading = {this.state.loading}\r\n                        color= \"green\"\r\n                        basic \r\n                        floated=\"right\"\r\n                        onClick={this.onSubmit}> \r\n                        BUY\r\n                    </Button>\r\n                    ,\r\n                    meta: 'Owner: ' + request.manager ,\r\n                    fluid: true\r\n                };\r\n            });\r\n            \r\n            // const cardsItems = await Promise.all(items).then((values) => {\r\n            //     console.log(values);\r\n            //     return values;\r\n            //   });\r\n    \r\n        // this.setState({ cardsItems });\r\n\r\n        return <Card.Group items={items}/>\r\n        // }\r\n     }\r\n\r\n    onSubmit = async event => {\r\n        event.preventDefault();\r\n        console.log(this.props.id);\r\n        const exchange = Exchange(this.props.address);\r\n        // const { manager, units, price} = exchange;\r\n\r\n        this.setState({loading: true, errorMessage: ''});\r\n\r\n        try {\r\n            await ethereum.enable();\r\n            const accounts = await web3.eth.getAccounts();\r\n            \r\n            await exchange.methods.FinalizeExchange(this.props.id).send({\r\n                from : accounts[0]\r\n            });\r\n    \r\n\r\n        Router.pushRoute(`/`)\r\n        } catch (err) {\r\n\r\n            this.setState({ errorMessage: err.message});\r\n        }\r\n        finally{\r\n\r\n            this.setState({ loading: false});\r\n        }\r\n    }\r\n\r\n\r\n    render() {\r\n    return <div>\r\n        <Layout>\r\n\r\n            <h2>Pending Exchanges</h2>\r\n            <Link route=\"/Exchanges/new\">\r\n                <a>\r\n                    <Button \r\n                        content='Create new Exchange' \r\n                        icon='add' \r\n                        primary \r\n                        floated=\"right\" \r\n                    />\r\n                </a>\r\n            </Link>\r\n            {/* <Card.Group items={this.state.cardsItems}/> */}\r\n               {this.renderCard()}\r\n                \r\n        </Layout>\r\n        </div>;\r\n    }\r\n}\r\n\r\nexport default ExchangeIndex;"]},"metadata":{},"sourceType":"module"}