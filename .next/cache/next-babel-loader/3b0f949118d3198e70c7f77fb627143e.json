{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component } from 'react';\nimport Layout from '../../components/Layout';\nimport { Form, Button, Input, Message, Divider } from 'semantic-ui-react';\nimport Exchange from '../../ethereum/exchange';\nimport web3 from '../../ethereum/web3';\nimport { Router } from '../../routes';\nimport factory from '../../ethereum/factory'; // import Router from 'next/router'\n\nclass ExchangeNew extends Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      PowerUnits: '',\n      Price: '',\n      errorMessage: '',\n      recipient: '',\n      loading: false\n    });\n\n    _defineProperty(this, \"onSubmit\", async event => {\n      event.preventDefault();\n      this.setState({\n        loading: true,\n        errorMessage: ''\n      });\n      await ethereum.enable();\n      const accounts = await web3.eth.getAccounts();\n      const {\n        PowerUnits,\n        Price,\n        recipient\n      } = this.state; // await factory.methods.createExchange()\n      //         .send({ from: accounts[0]});\n\n      var AllExchanges = await factory.methods.getDeployedExchanges().call();\n      var i = 0;\n      var m = 0;\n      var currentExchange = [];\n      var theExchange = [];\n\n      if (AllExchanges.length != 0) {\n        for (var j = 0; j < AllExchanges.length; j++) {\n          currentExchange = Exchange(AllExchanges[j]);\n          theExchange = await Promise.all(currentExchange.methods.exchangeRequests(j).call());\n\n          if (theExchange.manager == accounts[0]) {\n            i += 1;\n            m = j;\n          }\n        }\n      }\n\n      if (i == 0) {\n        await factory.methods.createExchange().send({\n          from: accounts[0]\n        });\n        AllExchanges = await factory.methods.getDeployedExchanges().call();\n        m = AllExchanges.length - 1;\n      }\n\n      const exchange = Exchange(AllExchanges[AllExchanges.length - 1]);\n\n      try {\n        await exchange.methods.createRequest(web3.utils.toWei(Price, 'ether'), recipient, PowerUnits, m).send({\n          from: accounts[0]\n        });\n        Router.pushRoute('/');\n      } catch (err) {\n        this.setState({\n          errorMessage: err.message\n        });\n      } finally {\n        this.setState({\n          loading: false\n        });\n      }\n    });\n  }\n\n  render() {\n    return __jsx(Layout, null, __jsx(\"h2\", null, \"Create New Exchange\"), __jsx(Divider, {\n      hidden: true\n    }), __jsx(Divider, {\n      inverted: true,\n      width: 6\n    }), __jsx(Divider, {\n      hidden: true\n    }), __jsx(Form, {\n      onSubmit: this.onSubmit,\n      error: !!this.state.errorMessage\n    }, __jsx(Form.Field, {\n      width: 6\n    }, __jsx(\"label\", null, \"Power Units\"), __jsx(Input, {\n      label: \"Kw\",\n      labelPosition: \"right\",\n      value: this.state.PowerUnits,\n      onChange: event => this.setState({\n        PowerUnits: event.target.value\n      })\n    })), __jsx(Form.Field, {\n      width: 6\n    }, __jsx(\"label\", null, \"Price\"), __jsx(Input, {\n      label: \"Ether\",\n      labelPosition: \"right\",\n      value: this.state.Price,\n      onChange: event => this.setState({\n        Price: event.target.value\n      })\n    })), __jsx(Form.Field, {\n      width: 6\n    }, __jsx(\"label\", null, \"Recipient\"), __jsx(Input, {\n      value: this.state.recipient,\n      onChange: event => this.setState({\n        recipient: event.target.value\n      })\n    })), __jsx(Divider, {\n      hidden: true\n    }), __jsx(Divider, {\n      inverted: true,\n      width: 6\n    }), __jsx(Divider, {\n      hidden: true\n    }), __jsx(Message, {\n      error: true,\n      header: \"Oops!\",\n      content: this.state.errorMessage\n    }), __jsx(Button, {\n      loading: this.state.loading,\n      primary: true\n    }, \"Create\")));\n  }\n\n}\n\nexport default ExchangeNew;","map":{"version":3,"sources":["C:/Users/toshiba/Desktop/Elex22/BlockChainMicroGrid/pages/Exchanges/new.js"],"names":["React","Component","Layout","Form","Button","Input","Message","Divider","Exchange","web3","Router","factory","ExchangeNew","PowerUnits","Price","errorMessage","recipient","loading","event","preventDefault","setState","ethereum","enable","accounts","eth","getAccounts","state","AllExchanges","methods","getDeployedExchanges","call","i","m","currentExchange","theExchange","length","j","Promise","all","exchangeRequests","manager","createExchange","send","from","exchange","createRequest","utils","toWei","pushRoute","err","message","render","onSubmit","target","value"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\r\nimport Layout from '../../components/Layout';\r\nimport {Form, Button, Input, Message, Divider} from 'semantic-ui-react';\r\nimport Exchange from '../../ethereum/exchange';\r\nimport web3 from '../../ethereum/web3';\r\nimport { Router } from '../../routes';\r\nimport factory from '../../ethereum/factory';\r\n\r\n// import Router from 'next/router'\r\n\r\nclass ExchangeNew extends Component {\r\n    state = {\r\n        PowerUnits: '',\r\n        Price: '',\r\n        errorMessage: '',\r\n        recipient: '',\r\n        loading: false\r\n    };\r\n    \r\n\r\n\r\n    onSubmit = async event => {\r\n        event.preventDefault();\r\n\r\n        this.setState({loading: true, errorMessage:''});\r\n\r\n        await ethereum.enable();\r\n        const accounts = await web3.eth.getAccounts();\r\n        const { PowerUnits, Price, recipient} = this.state;\r\n\r\n        // await factory.methods.createExchange()\r\n        //         .send({ from: accounts[0]});\r\n        var AllExchanges = await factory.methods.getDeployedExchanges().call();\r\n\r\n        var i = 0;\r\n        var m = 0;\r\n        var currentExchange = [];\r\n        var theExchange = [];\r\n        if(AllExchanges.length != 0){\r\n            for (var j = 0; j < AllExchanges.length; j++){\r\n                currentExchange = Exchange(AllExchanges[j]);\r\n                theExchange = await Promise.all(currentExchange.methods.exchangeRequests(j).call());\r\n                if(theExchange.manager == accounts[0]){\r\n                    i += 1 ;\r\n                    m = j;\r\n                }\r\n            }\r\n        }\r\n        \r\n\r\n        if (i == 0){\r\n            await factory.methods.createExchange()\r\n                .send({ from: accounts[0]});\r\n            AllExchanges = await factory.methods.getDeployedExchanges().call();\r\n            m = AllExchanges.length - 1;\r\n        }\r\n        \r\n        const exchange = Exchange(AllExchanges[AllExchanges.length - 1]);\r\n        try{\r\n            await exchange.methods\r\n                .createRequest(\r\n                    web3.utils.toWei(Price, 'ether'),\r\n                    recipient, \r\n                    PowerUnits, m).send({ from: accounts[0]});\r\n            \r\n           \r\n            Router.pushRoute('/');\r\n\r\n        }\r\n        catch(err)\r\n        {\r\n            this.setState({errorMessage: err.message});\r\n        } finally { \r\n\r\n            this.setState({loading: false});\r\n           \r\n        }\r\n    };\r\n\r\n    render() {\r\n        return(\r\n            <Layout>\r\n                <h2>Create New Exchange</h2>\r\n                <Divider hidden />\r\n                <Divider inverted width={6}/>\r\n                <Divider hidden />\r\n                <Form onSubmit={this.onSubmit} error={!!this.state.errorMessage}>\r\n                    <Form.Field width={6}>\r\n                        <label>Power Units</label>\r\n                        <Input \r\n                            label=\"Kw\" \r\n                            labelPosition=\"right\"\r\n                            value={this.state.PowerUnits}\r\n                            onChange={event => \r\n                                this.setState({ PowerUnits: event.target.value })}/>\r\n                    </Form.Field>\r\n\r\n                    <Form.Field width={6}>\r\n                        <label>Price</label>\r\n                        <Input \r\n                            label=\"Ether\" \r\n                            labelPosition=\"right\"\r\n                            value={this.state.Price}\r\n                            onChange={event => \r\n                                this.setState({ Price: event.target.value })}/>\r\n                    </Form.Field>\r\n\r\n                    <Form.Field width={6}>\r\n                        <label>Recipient</label>\r\n                        <Input \r\n                            value={this.state.recipient}\r\n                            onChange={event => this.setState({ recipient: event.target.value})}/>\r\n                    </Form.Field>\r\n\r\n                    <Divider hidden />\r\n                    <Divider inverted width={6}/>\r\n                    <Divider hidden />\r\n                    <Message error header=\"Oops!\" content={this.state.errorMessage} />\r\n                    <Button loading={this.state.loading} primary>Create</Button>\r\n                </Form>\r\n            </Layout>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ExchangeNew;"]},"metadata":{},"sourceType":"module"}