{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component } from 'react';\nimport { Card, Button } from 'semantic-ui-react';\nimport factory from '../ethereum/factory';\nimport Layout from '../components/Layout';\nimport { Link } from '../routes';\nimport Exchange from '../ethereum/exchange';\nimport web3 from '../ethereum/web3'; // export default () => {\n//     return <h1>This is the index page</h1>;\n// };\n\nclass ExchangeIndex extends Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      units: '',\n      price: '',\n      manager: '',\n      loading: false,\n      errorMessage: '' // cardsItems: {}\n\n    });\n\n    _defineProperty(this, \"renderCard\", async () => {\n      await ethereum.enable();\n      const accounts = await web3.eth.getAccounts();\n\n      if (this.props.AllExchanges.length != 0) {\n        const items = this.props.requests.map((request, index) => {\n          // const exchange = Exchange(address);\n          // const summary = await exchange.methods.getSummary().call();\n          //     // console.log(summary);\n          if (accounts[0] == request.manager) {\n            return {\n              header: request.units + 'Kw | ' + request.price + 'wei',\n              description: __jsx(Button, {\n                disabled: request.complete,\n                color: \"blue\",\n                basic: true,\n                floated: \"right\",\n                id: index,\n                onClick: this.onFinalize.bind(this, {\n                  index\n                })\n              }, \"Finalize\"),\n              meta: 'Owner: ' + request.manager,\n              fluid: true\n            };\n          } else {\n            return {\n              header: request.units + 'Kw | ' + request.price + 'wei',\n              description: __jsx(Button, {\n                color: \"green\",\n                basic: true,\n                floated: \"right\",\n                id: index,\n                onClick: this.onSubmit.bind(this, {\n                  index\n                })\n              }, \"BUY\"),\n              meta: 'Owner: ' + request.manager,\n              fluid: true\n            };\n          }\n        }); // const cardsItems = await Promise.all(items).then((values) => {\n        //     console.log(values);\n        //     return values;\n        //   });\n        // this.setState({ cardsItems });\n\n        return __jsx(Card.Group, {\n          items: items\n        });\n      }\n    });\n\n    _defineProperty(this, \"onSubmit\", async (event, id) => {\n      // event.preventDefault();\n      console.log(id.target.id);\n      const indexofButtton = parseInt(id.target.id); // this.state.indexofButtton = id.target.id;\n\n      const exchange = Exchange(this.props.TheAddress);\n      const {\n        price\n      } = this.props.requests[indexofButtton]; // this.setState({loading: true, errorMessage: ''});\n\n      await ethereum.enable();\n      const accounts = await web3.eth.getAccounts();\n      await exchange.methods.contribute().send({\n        from: accounts[0],\n        value: parseInt(price)\n      });\n      await exchange.methods.finalizeRequest(indexofButtton).send({\n        from: accounts[0]\n      });\n    });\n\n    _defineProperty(this, \"onFinalize\", async (event, id) => {\n      // event.preventDefault();\n      console.log(id.target.id);\n      const indexofButtton = parseInt(id.target.id); // this.state.indexofButtton = id.target.id;\n\n      const exchange = Exchange(this.props.TheAddress);\n      const {\n        price\n      } = this.props.requests[indexofButtton]; // this.setState({loading: true, errorMessage: ''});\n\n      await ethereum.enable();\n      const accounts = await web3.eth.getAccounts();\n      await exchange.methods.finalizeRequest(indexofButtton).send({\n        from: accounts[0]\n      });\n    });\n  }\n\n  static async getInitialProps() {\n    const AllExchanges = await factory.methods.getDeployedExchanges().call();\n    console.log(AllExchanges);\n    var requests = [];\n    var TheAddress = '';\n\n    if (AllExchanges.length != 0) {\n      TheAddress = AllExchanges[0];\n      const exchange = Exchange(AllExchanges[0]);\n      const requestCount = await exchange.methods.getRequestsCount().call();\n      requests = await Promise.all(Array(parseInt(requestCount)).fill().map((element, index) => {\n        return exchange.methods.exchangeRequests(index).call();\n      }));\n    }\n\n    return {\n      AllExchanges,\n      requests,\n      TheAddress\n    };\n  }\n\n  render() {\n    return __jsx(\"div\", null, __jsx(Layout, null, __jsx(\"h2\", null, \"Pending Exchanges\"), __jsx(Link, {\n      route: \"/Exchanges/new\"\n    }, __jsx(\"a\", null, __jsx(Button, {\n      content: \"Create new Exchange\",\n      icon: \"add\",\n      primary: true,\n      floated: \"right\"\n    }))), this.renderCard()));\n  }\n\n}\n\nexport default ExchangeIndex;","map":{"version":3,"sources":["C:/Users/toshiba/Desktop/BlockChainMicroGrid/pages/index.js"],"names":["React","Component","Card","Button","factory","Layout","Link","Exchange","web3","ExchangeIndex","units","price","manager","loading","errorMessage","ethereum","enable","accounts","eth","getAccounts","props","AllExchanges","length","items","requests","map","request","index","header","description","complete","onFinalize","bind","meta","fluid","onSubmit","event","id","console","log","target","indexofButtton","parseInt","exchange","TheAddress","methods","contribute","send","from","value","finalizeRequest","getInitialProps","getDeployedExchanges","call","requestCount","getRequestsCount","Promise","all","Array","fill","element","exchangeRequests","render","renderCard"],"mappings":"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","sourcesContent":["import React , {Component} from 'react';\r\nimport {Card , Button} from 'semantic-ui-react';\r\nimport factory from '../ethereum/factory';\r\nimport Layout from '../components/Layout';\r\nimport { Link } from '../routes';\r\nimport Exchange from '../ethereum/exchange';\r\nimport web3 from '../ethereum/web3';\r\n\r\n// export default () => {\r\n//     return <h1>This is the index page</h1>;\r\n// };\r\n\r\nclass ExchangeIndex extends Component {\r\n\r\n    static async getInitialProps(){\r\n        const AllExchanges = await factory.methods.getDeployedExchanges().call();\r\n        console.log(AllExchanges);\r\n        var requests = [];\r\n        var TheAddress = '';\r\n        if (AllExchanges.length != 0 ){\r\n            TheAddress = AllExchanges[0];\r\n            const exchange = Exchange(AllExchanges[0]);\r\n            const requestCount = await exchange.methods.getRequestsCount().call();\r\n\r\n            requests = await Promise.all(\r\n                Array(parseInt(requestCount)).fill().map((element, index) => {\r\n                    return exchange.methods.exchangeRequests(index).call()\r\n                })\r\n            );\r\n\r\n            \r\n        }\r\n        \r\n        return { AllExchanges ,requests, TheAddress};\r\n        \r\n    }\r\n    \r\n    state = {\r\n        units: '',\r\n        price: '',\r\n        manager: '',\r\n        loading: false,\r\n        errorMessage:''\r\n        // cardsItems: {}\r\n    }\r\n\r\n    renderCard = async ()  =>  {\r\n        await ethereum.enable();\r\n            const accounts = await web3.eth.getAccounts();\r\n        if(this.props.AllExchanges.length != 0){\r\n        const items = this.props.requests.map( (request, index) => {\r\n            \r\n            // const exchange = Exchange(address);\r\n            // const summary = await exchange.methods.getSummary().call();\r\n            //     // console.log(summary);\r\n            if(accounts[0] == request.manager){\r\n            return {\r\n                \r\n                    header: request.units + 'Kw | ' + request.price + 'wei' ,\r\n                    description: \r\n                    <Button disabled={request.complete} \r\n                        color= \"blue\"\r\n                        basic \r\n                        floated=\"right\"\r\n                        id={index}\r\n                        onClick={this.onFinalize.bind(this, {index})}> \r\n                        Finalize\r\n                    </Button> ,\r\n                    meta: 'Owner: ' + request.manager ,\r\n                    fluid: true\r\n                };\r\n            }else{\r\n                return {\r\n                \r\n                    header: request.units + 'Kw | ' + request.price + 'wei' ,\r\n                    description: \r\n                    <Button   \r\n                        color= \"green\"\r\n                        basic \r\n                        floated=\"right\"\r\n                        id={index}\r\n                        onClick={ this.onSubmit.bind(this, {index})}> \r\n                        BUY\r\n                    </Button>\r\n                    ,\r\n                    meta: 'Owner: ' + request.manager ,\r\n                    fluid: true\r\n                };\r\n            }});\r\n        \r\n            \r\n            // const cardsItems = await Promise.all(items).then((values) => {\r\n            //     console.log(values);\r\n            //     return values;\r\n            //   });\r\n    \r\n        // this.setState({ cardsItems });\r\n\r\n        return <Card.Group items={items}/>\r\n        }\r\n     }\r\n\r\n    onSubmit = async (event, id) => {\r\n        // event.preventDefault();\r\n        console.log(id.target.id);\r\n        const indexofButtton = parseInt(id.target.id);\r\n        // this.state.indexofButtton = id.target.id;\r\n        const exchange = Exchange(this.props.TheAddress);\r\n\r\n        const {price} = this.props.requests[indexofButtton];\r\n\r\n        // this.setState({loading: true, errorMessage: ''});\r\n\r\n            await ethereum.enable();\r\n            const accounts = await web3.eth.getAccounts();\r\n            \r\n            await exchange.methods.contribute().send({\r\n                from : accounts[0],\r\n                value : parseInt(price)\r\n            });\r\n\r\n            await exchange.methods.finalizeRequest(indexofButtton).send({\r\n                from : accounts[0]\r\n            });\r\n    \r\n    }\r\n\r\n    onFinalize = async (event, id) => {\r\n        // event.preventDefault();\r\n        console.log(id.target.id);\r\n        const indexofButtton = parseInt(id.target.id);\r\n        // this.state.indexofButtton = id.target.id;\r\n        const exchange = Exchange(this.props.TheAddress);\r\n\r\n        const {price} = this.props.requests[indexofButtton];\r\n\r\n        // this.setState({loading: true, errorMessage: ''});\r\n\r\n            await ethereum.enable();\r\n            const accounts = await web3.eth.getAccounts();\r\n            \r\n\r\n            await exchange.methods.finalizeRequest(indexofButtton).send({\r\n                from : accounts[0]\r\n            });\r\n    \r\n    }\r\n\r\n    render() {\r\n    return <div>\r\n        <Layout>\r\n\r\n            <h2>Pending Exchanges</h2>\r\n            <Link route=\"/Exchanges/new\">\r\n                <a>\r\n                    <Button \r\n                        content='Create new Exchange' \r\n                        icon='add' \r\n                        primary \r\n                        floated=\"right\" \r\n                    />\r\n                </a>\r\n            </Link>\r\n            {/* <Card.Group items={this.state.cardsItems}/> */}\r\n               {this.renderCard()}\r\n                \r\n        </Layout>\r\n        </div>;\r\n    }\r\n}\r\n\r\nexport default ExchangeIndex;"]},"metadata":{},"sourceType":"module"}