{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport { Card, Button } from 'semantic-ui-react';\nimport factory from '../ethereum/factory';\nimport Layout from '../components/Layout';\nimport { Link } from '../routes';\nimport Exchange from '../ethereum/exchange';\nimport web3 from '../ethereum/web3'; // export default () => {\n//     return <h1>This is the index page</h1>;\n// };\n\nvar ExchangeIndex = /*#__PURE__*/function (_Component) {\n  _inherits(ExchangeIndex, _Component);\n\n  var _super = _createSuper(ExchangeIndex);\n\n  function ExchangeIndex() {\n    var _this;\n\n    _classCallCheck(this, ExchangeIndex);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      units: '',\n      price: '',\n      manager: '',\n      loading: false,\n      errorMessage: '' // cardsItems: {}\n\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"getCurrentAccount\", /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(event, id) {\n        var accounts;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return ethereum.enable();\n\n              case 2:\n                _context.next = 4;\n                return web3.eth.getAccounts();\n\n              case 4:\n                accounts = _context.sent;\n                return _context.abrupt(\"return\", accounts);\n\n              case 6:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function (_x, _x2) {\n        return _ref.apply(this, arguments);\n      };\n    }());\n\n    _defineProperty(_assertThisInitialized(_this), \"onSubmit\", /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(event, id) {\n        var indexofButtton, exchange, price, accounts;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                // event.preventDefault();\n                console.log(id.target.parentNode.id);\n                indexofButtton = parseInt(id.target.parentNode.id); // this.state.indexofButtton = id.target.id;\n\n                exchange = Exchange(_this.props.TheAddress);\n                price = _this.props.requests[indexofButtton].price; // this.setState({loading: true, errorMessage: ''});\n\n                _context2.next = 6;\n                return ethereum.enable();\n\n              case 6:\n                _context2.next = 8;\n                return web3.eth.getAccounts();\n\n              case 8:\n                accounts = _context2.sent;\n                _context2.next = 11;\n                return exchange.methods.contribute().send({\n                  from: accounts[0],\n                  value: parseInt(price)\n                });\n\n              case 11:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      return function (_x3, _x4) {\n        return _ref2.apply(this, arguments);\n      };\n    }());\n\n    _defineProperty(_assertThisInitialized(_this), \"onFinalize\", /*#__PURE__*/function () {\n      var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(event, id) {\n        var indexofButtton, exchange, accounts;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                // event.preventDefault();\n                console.log(id.target.parentNode.id);\n                indexofButtton = parseInt(id.target.parentNode.id); // this.state.indexofButtton = id.target.id;\n\n                exchange = Exchange(_this.props.TheAddress); // this.setState({loading: true, errorMessage: ''});\n\n                _context3.next = 5;\n                return ethereum.enable();\n\n              case 5:\n                _context3.next = 7;\n                return web3.eth.getAccounts();\n\n              case 7:\n                accounts = _context3.sent;\n                _context3.next = 10;\n                return exchange.methods.finalizeRequest(indexofButtton).send({\n                  from: accounts[0]\n                });\n\n              case 10:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }));\n\n      return function (_x5, _x6) {\n        return _ref3.apply(this, arguments);\n      };\n    }());\n\n    return _this;\n  }\n\n  _createClass(ExchangeIndex, [{\n    key: \"renderCard\",\n    value: function renderCard() {\n      var _this2 = this;\n\n      this.getCurrentAccount.bind(this, {\n        index: index\n      });\n      var account0;\n      web3.eth.getAccounts().then(function (result) {\n        account0 = result[0];\n      });\n      console.log(account0);\n\n      if (this.props.AllExchanges.length != 0) {\n        var items = this.props.requests.map(function (request, index) {\n          if (account0 == request.manager) {\n            return {\n              header: request.units + ' Kw | ' + request.price + ' wei',\n              description: __jsx(\"div\", null, __jsx(\"div\", {\n                \"class\": \"ui inverted divider\"\n              }), __jsx(\"div\", {\n                className: \"ui basic buttons\",\n                id: index\n              }, __jsx(Button, {\n                disabled: request.complete,\n                color: \"blue\",\n                basic: true,\n                floated: \"right\",\n                onClick: _this2.onFinalize.bind(_this2, {\n                  index: index\n                })\n              }, \"Finalize\")), \" \"),\n              meta: 'Owner: ' + request.manager,\n              fluid: true,\n              style: {\n                width: '500px'\n              }\n            };\n          } else {\n            return {\n              header: request.units + ' Kw | ' + request.price + ' wei',\n              description: __jsx(\"div\", null, __jsx(\"div\", {\n                \"class\": \"ui inverted divider\"\n              }), __jsx(\"div\", {\n                className: \"ui basic buttons\",\n                id: index\n              }, __jsx(Button, {\n                color: \"green\",\n                basic: true,\n                floated: \"right\",\n                onClick: _this2.onSubmit.bind(_this2, {\n                  index: index\n                })\n              }, \"Buy\")), \" \"),\n              meta: 'Owner: ' + request.manager,\n              fluid: true,\n              style: {\n                width: '500px'\n              }\n            };\n          }\n        }); // const cardsItems = await Promise.all(items).then((values) => {\n        //     console.log(values);\n        //     return values;\n        //   });\n        // this.setState({ cardsItems });\n\n        return __jsx(Card.Group, {\n          items: items\n        });\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return __jsx(\"div\", null, __jsx(Layout, null, __jsx(\"h2\", null, \"Pending Exchanges\"), __jsx(Link, {\n        route: \"/Exchanges/new\"\n      }, __jsx(\"a\", null, __jsx(Button, {\n        content: \"Create new Exchange\",\n        icon: \"add\",\n        primary: true,\n        floated: \"right\"\n      }))), this.renderCard()));\n    }\n  }], [{\n    key: \"getInitialProps\",\n    value: function () {\n      var _getInitialProps = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n        var AllExchanges, requests, TheAddress, exchange, requestCount;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _context4.next = 2;\n                return factory.methods.getDeployedExchanges().call();\n\n              case 2:\n                AllExchanges = _context4.sent;\n                // console.log(AllExchanges);\n                requests = [];\n                TheAddress = '';\n\n                if (!(AllExchanges.length != 0)) {\n                  _context4.next = 14;\n                  break;\n                }\n\n                TheAddress = AllExchanges[0];\n                exchange = Exchange(AllExchanges[0]);\n                _context4.next = 10;\n                return exchange.methods.getRequestsCount().call();\n\n              case 10:\n                requestCount = _context4.sent;\n                _context4.next = 13;\n                return Promise.all(Array(parseInt(requestCount)).fill().map(function (element, index) {\n                  return exchange.methods.exchangeRequests(index).call();\n                }));\n\n              case 13:\n                requests = _context4.sent;\n\n              case 14:\n                return _context4.abrupt(\"return\", {\n                  AllExchanges: AllExchanges,\n                  requests: requests,\n                  TheAddress: TheAddress\n                });\n\n              case 15:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4);\n      }));\n\n      function getInitialProps() {\n        return _getInitialProps.apply(this, arguments);\n      }\n\n      return getInitialProps;\n    }()\n  }]);\n\n  return ExchangeIndex;\n}(Component);\n\nexport default ExchangeIndex;","map":{"version":3,"sources":["C:/Users/toshiba/Desktop/BlockChainMicroGrid/pages/index.js"],"names":["React","Component","Card","Button","factory","Layout","Link","Exchange","web3","ExchangeIndex","units","price","manager","loading","errorMessage","event","id","ethereum","enable","eth","getAccounts","accounts","console","log","target","parentNode","indexofButtton","parseInt","exchange","props","TheAddress","requests","methods","contribute","send","from","value","finalizeRequest","getCurrentAccount","bind","index","account0","then","result","AllExchanges","length","items","map","request","header","description","complete","onFinalize","meta","fluid","style","width","onSubmit","renderCard","getDeployedExchanges","call","getRequestsCount","requestCount","Promise","all","Array","fill","element","exchangeRequests"],"mappings":"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","sourcesContent":["import React , {Component} from 'react';\r\nimport {Card , Button} from 'semantic-ui-react';\r\nimport factory from '../ethereum/factory';\r\nimport Layout from '../components/Layout';\r\nimport { Link } from '../routes';\r\nimport Exchange from '../ethereum/exchange';\r\nimport web3 from '../ethereum/web3';\r\n\r\n// export default () => {\r\n//     return <h1>This is the index page</h1>;\r\n// };\r\n\r\nclass ExchangeIndex extends Component {\r\n\r\n\r\n    static async getInitialProps(){\r\n        const AllExchanges = await factory.methods.getDeployedExchanges().call();\r\n        // console.log(AllExchanges);\r\n        var requests = [];\r\n        var TheAddress = '';\r\n        if (AllExchanges.length != 0 ){\r\n            TheAddress = AllExchanges[0];\r\n            const exchange = Exchange(AllExchanges[0]);\r\n            const requestCount = await exchange.methods.getRequestsCount().call();\r\n\r\n            requests = await Promise.all(\r\n                Array(parseInt(requestCount)).fill().map((element, index) => {\r\n                    return exchange.methods.exchangeRequests(index).call()\r\n                })\r\n            );\r\n\r\n            \r\n        }\r\n        \r\n        \r\n        return { AllExchanges ,requests, TheAddress};\r\n        \r\n    }\r\n    \r\n    state = {\r\n        units: '',\r\n        price: '',\r\n        manager: '',\r\n        loading: false,\r\n        errorMessage:''\r\n        // cardsItems: {}\r\n    }\r\n\r\n    renderCard() {\r\n        \r\n        this.getCurrentAccount.bind(this, {index});\r\n\r\n\r\n        var account0;\r\n        web3.eth.getAccounts().then(function(result){\r\n          account0 = result[0];\r\n        })\r\n        console.log(account0);\r\n\r\n        if(this.props.AllExchanges.length != 0){\r\n        const items = this.props.requests.map( (request, index) => {\r\n            \r\n            if(account0 == request.manager){\r\n                return {\r\n                    header: request.units + ' Kw | ' + request.price + ' wei' ,\r\n                        description: \r\n                        <div>\r\n                        <div class=\"ui inverted divider\"></div>\r\n                        <div className='ui basic buttons' id={index}>\r\n                        <Button disabled={request.complete} \r\n                            color= \"blue\"\r\n                            basic \r\n                            floated=\"right\"\r\n                            onClick={this.onFinalize.bind(this, {index})}> \r\n                            Finalize\r\n                        </Button></div> </div>,\r\n                        meta: 'Owner: ' + request.manager ,\r\n                        fluid: true,\r\n                        style: {width:'500px'}\r\n                    };\r\n            }\r\n            else\r\n            {\r\n                return {\r\n                    header: request.units + ' Kw | ' + request.price + ' wei' ,\r\n                        description: \r\n                        <div>\r\n                        <div class=\"ui inverted divider\"></div>\r\n                        <div className='ui basic buttons' id={index}>\r\n                        <Button   \r\n                            color= \"green\"\r\n                            basic \r\n                            floated=\"right\"\r\n                            onClick={ this.onSubmit.bind(this, {index})}> \r\n                            Buy\r\n                        </Button></div> </div>,\r\n                        meta: 'Owner: ' + request.manager ,\r\n                        fluid: true,\r\n                        style: {width:'500px'}\r\n                    };\r\n            }\r\n            \r\n            });\r\n            \r\n            // const cardsItems = await Promise.all(items).then((values) => {\r\n            //     console.log(values);\r\n            //     return values;\r\n            //   });\r\n    \r\n        // this.setState({ cardsItems });\r\n        \r\n        return <Card.Group items={items} />\r\n     }\r\n    }\r\n\r\n    getCurrentAccount = async (event, id) => {\r\n       \r\n            await ethereum.enable();\r\n            const accounts = await web3.eth.getAccounts();\r\n        \r\n            return accounts;\r\n    }\r\n\r\n    onSubmit = async (event, id) => {\r\n        // event.preventDefault();\r\n        console.log(id.target.parentNode.id);\r\n        const indexofButtton = parseInt(id.target.parentNode.id);\r\n        // this.state.indexofButtton = id.target.id;\r\n        const exchange = Exchange(this.props.TheAddress);\r\n\r\n        const {price} = this.props.requests[indexofButtton];\r\n        \r\n        // this.setState({loading: true, errorMessage: ''});\r\n\r\n            await ethereum.enable();\r\n            const accounts = await web3.eth.getAccounts();\r\n            \r\n            await exchange.methods.contribute().send({\r\n                from : accounts[0],\r\n                value : parseInt(price)\r\n            });\r\n\r\n    }\r\n\r\n    onFinalize = async (event, id) => {\r\n        // event.preventDefault();\r\n        console.log(id.target.parentNode.id);\r\n        const indexofButtton = parseInt(id.target.parentNode.id);\r\n        // this.state.indexofButtton = id.target.id;\r\n        const exchange = Exchange(this.props.TheAddress);\r\n\r\n\r\n        // this.setState({loading: true, errorMessage: ''});\r\n\r\n            await ethereum.enable();\r\n            const accounts = await web3.eth.getAccounts();\r\n            \r\n\r\n            await exchange.methods.finalizeRequest(indexofButtton).send({\r\n                from : accounts[0]\r\n            });\r\n    \r\n    }\r\n\r\n\r\n    render() {\r\n    return <div>\r\n        <Layout>\r\n\r\n            <h2>Pending Exchanges</h2>\r\n            <Link route=\"/Exchanges/new\">\r\n                <a>\r\n                    <Button \r\n                        content='Create new Exchange' \r\n                        icon='add' \r\n                        primary \r\n                        floated=\"right\" \r\n                    />\r\n                </a>\r\n            </Link>\r\n            {/* <Card.Group items={this.state.cardsItems}/> */}\r\n               {this.renderCard()}\r\n                \r\n        </Layout>\r\n        </div>;\r\n    }\r\n}\r\n\r\nexport default ExchangeIndex;"]},"metadata":{},"sourceType":"module"}