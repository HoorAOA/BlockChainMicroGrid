{"ast":null,"code":"import _readOnlyError from \"@babel/runtime/helpers/esm/readOnlyError\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport { Card, Button } from 'semantic-ui-react';\nimport factory from '../ethereum/factory';\nimport Layout from '../components/Layout';\nimport { Link } from '../routes';\nimport Exchange from '../ethereum/exchange';\nimport web3 from '../ethereum/web3';\n\nvar ExchangeIndex = /*#__PURE__*/function (_Component) {\n  _inherits(ExchangeIndex, _Component);\n\n  var _super = _createSuper(ExchangeIndex);\n\n  function ExchangeIndex() {\n    var _this;\n\n    _classCallCheck(this, ExchangeIndex);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      units: '',\n      price: '',\n      manager: '',\n      loading: false,\n      errorMessage: '',\n      accountAddress: '' // cardsItems: {}\n\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onSubmit\", /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(event, id) {\n        var indexofButtton, n, exchange, price, accounts;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                // event.preventDefault();\n                console.log(id.target.parentNode.id);\n                indexofButtton = parseInt(id.target.parentNode.id);\n                n = _this.props.AllRequests[indexofButtton].ExchangeNo;\n                exchange = Exchange(_this.props.AllExchanges[n]);\n                price = _this.props.AllRequests[indexofButtton].price;\n                _context.next = 7;\n                return ethereum.enable();\n\n              case 7:\n                _context.next = 9;\n                return web3.eth.getAccounts();\n\n              case 9:\n                accounts = _context.sent;\n                _context.next = 12;\n                return exchange.methods.contribute().send({\n                  from: accounts[0],\n                  value: parseInt(price)\n                });\n\n              case 12:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function (_x, _x2) {\n        return _ref.apply(this, arguments);\n      };\n    }());\n\n    _defineProperty(_assertThisInitialized(_this), \"onFinalize\", /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(event, id) {\n        var indexofButtton, n, exchange, prevRequests, requestCount, currentExchange, i, accounts;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                // event.preventDefault();\n                console.log(id.target.parentNode.id);\n                indexofButtton = parseInt(id.target.parentNode.id);\n                n = _this.props.AllRequests[indexofButtton].ExchangeNo;\n                exchange = Exchange(_this.props.AllExchanges[n]);\n                prevRequests = 0;\n                requestCount = 0;\n                currentExchange = [];\n\n                if (!(n > 0)) {\n                  _context2.next = 21;\n                  break;\n                }\n\n                i = 0;\n\n              case 9:\n                if (!(i < n)) {\n                  _context2.next = 20;\n                  break;\n                }\n\n                _context2.next = 12;\n                return Exchange(_this.props.AllExchanges[i]);\n\n              case 12:\n                currentExchange = _context2.sent;\n                _context2.next = 15;\n                return currentExchange.methods.getRequestsCount().call();\n\n              case 15:\n                requestCount = _context2.sent;\n                prevRequests += requestCount;\n\n              case 17:\n                i++;\n                _context2.next = 9;\n                break;\n\n              case 20:\n                indexofButtton = (_readOnlyError(\"indexofButtton\"), indexofButtton - prevRequests - 1);\n\n              case 21:\n                _context2.next = 23;\n                return ethereum.enable();\n\n              case 23:\n                _context2.next = 25;\n                return web3.eth.getAccounts();\n\n              case 25:\n                accounts = _context2.sent;\n                _context2.next = 28;\n                return exchange.methods.finalizeRequest(indexofButtton).send({\n                  from: accounts[0]\n                });\n\n              case 28:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      return function (_x3, _x4) {\n        return _ref2.apply(this, arguments);\n      };\n    }());\n\n    return _this;\n  }\n\n  _createClass(ExchangeIndex, [{\n    key: \"componentDidMount\",\n    value: function () {\n      var _componentDidMount = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n        var accounts;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.next = 2;\n                return ethereum.enable();\n\n              case 2:\n                _context3.next = 4;\n                return web3.eth.getAccounts();\n\n              case 4:\n                accounts = _context3.sent;\n                this.setState({\n                  accountAddress: accounts[0]\n                });\n\n              case 6:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function componentDidMount() {\n        return _componentDidMount.apply(this, arguments);\n      }\n\n      return componentDidMount;\n    }()\n  }, {\n    key: \"renderCard\",\n    value: function renderCard() {\n      var _this2 = this;\n\n      if (this.props.AllExchanges.length != 0) {\n        var items = this.props.AllRequests.map(function (request, index) {\n          if (_this2.state.accountAddress == request.manager) {\n            return {\n              header: request.units + ' Kw | ' + request.price + ' wei',\n              description: __jsx(\"div\", null, __jsx(\"div\", {\n                \"class\": \"ui inverted divider\"\n              }), __jsx(\"div\", {\n                id: index\n              }, __jsx(Button, {\n                disabled: request.complete,\n                fluid: true,\n                color: \"blue\",\n                basic: true,\n                floated: \"right\",\n                onClick: _this2.onFinalize.bind(_this2, {\n                  index: index\n                })\n              }, \"Finalize\")), \" \"),\n              meta: 'Owner: ' + request.manager,\n              fluid: true,\n              style: {\n                width: '500px'\n              }\n            };\n          } else {\n            return {\n              header: request.units + ' Kw | ' + request.price + ' wei',\n              description: __jsx(\"div\", null, __jsx(\"div\", {\n                \"class\": \"ui inverted divider\"\n              }), __jsx(\"div\", {\n                id: index\n              }, __jsx(Button, {\n                disabled: request.complete,\n                fluid: true,\n                color: \"green\",\n                basic: true,\n                floated: \"right\",\n                onClick: _this2.onSubmit.bind(_this2, {\n                  index: index\n                })\n              }, \"Buy\")), \" \"),\n              meta: 'Owner: ' + request.manager,\n              fluid: true,\n              style: {\n                width: '500px'\n              }\n            };\n          }\n        }); // const cardsItems = await Promise.all(items).then((values) => {\n        //     console.log(values);\n        //     return values;\n        //   });\n        // this.setState({ cardsItems });\n\n        return __jsx(Card.Group, {\n          items: items\n        });\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return __jsx(\"div\", null, __jsx(Layout, null, __jsx(\"h2\", null, \"Pending Exchanges\"), __jsx(Link, {\n        route: \"/Exchanges/new\"\n      }, __jsx(\"a\", null, __jsx(Button, {\n        content: \"Create new Exchange\",\n        icon: \"add\",\n        primary: true,\n        floated: \"right\"\n      }))), this.renderCard()));\n    }\n  }], [{\n    key: \"getInitialProps\",\n    value: function () {\n      var _getInitialProps = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n        var AllExchanges, requests, AllRequests, exchange, requestCount, j;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _context4.next = 2;\n                return factory.methods.getDeployedExchanges().call();\n\n              case 2:\n                AllExchanges = _context4.sent;\n                // console.log(AllExchanges);\n                requests = [];\n                AllRequests = [];\n                exchange = [];\n                requestCount = 0;\n\n                if (!(AllExchanges.length != 0)) {\n                  _context4.next = 21;\n                  break;\n                }\n\n                j = 0;\n\n              case 9:\n                if (!(j < AllExchanges.length)) {\n                  _context4.next = 21;\n                  break;\n                }\n\n                exchange = Exchange(AllExchanges[j]);\n                _context4.next = 13;\n                return exchange.methods.getRequestsCount().call();\n\n              case 13:\n                requestCount = _context4.sent;\n                _context4.next = 16;\n                return Promise.all(Array(parseInt(requestCount)).fill().map(function (element, index) {\n                  return exchange.methods.exchangeRequests(index).call();\n                }));\n\n              case 16:\n                requests = _context4.sent;\n                AllRequests.push.apply(AllRequests, requests);\n\n              case 18:\n                j++;\n                _context4.next = 9;\n                break;\n\n              case 21:\n                console.log(AllExchanges);\n                console.log(AllRequests);\n                return _context4.abrupt(\"return\", {\n                  AllExchanges: AllExchanges,\n                  AllRequests: AllRequests\n                });\n\n              case 24:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4);\n      }));\n\n      function getInitialProps() {\n        return _getInitialProps.apply(this, arguments);\n      }\n\n      return getInitialProps;\n    }()\n  }]);\n\n  return ExchangeIndex;\n}(Component);\n\nexport default ExchangeIndex;","map":{"version":3,"sources":["C:/Users/toshiba/Desktop/Elex22/BlockChainMicroGrid/pages/index.js"],"names":["React","Component","Card","Button","factory","Layout","Link","Exchange","web3","ExchangeIndex","units","price","manager","loading","errorMessage","accountAddress","event","id","console","log","target","parentNode","indexofButtton","parseInt","n","props","AllRequests","ExchangeNo","exchange","AllExchanges","ethereum","enable","eth","getAccounts","accounts","methods","contribute","send","from","value","prevRequests","requestCount","currentExchange","i","getRequestsCount","call","finalizeRequest","setState","length","items","map","request","index","state","header","description","complete","onFinalize","bind","meta","fluid","style","width","onSubmit","renderCard","getDeployedExchanges","requests","j","Promise","all","Array","fill","element","exchangeRequests","push","apply"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { Card, Button } from 'semantic-ui-react';\r\nimport factory from '../ethereum/factory';\r\nimport Layout from '../components/Layout';\r\nimport { Link } from '../routes';\r\nimport Exchange from '../ethereum/exchange';\r\nimport web3 from '../ethereum/web3';\r\n\r\n\r\nclass ExchangeIndex extends Component {\r\n\r\n\r\n    async componentDidMount() {\r\n        await ethereum.enable();\r\n        const accounts = await web3.eth.getAccounts();\r\n\r\n        this.setState({\r\n            accountAddress: accounts[0]\r\n        });\r\n    }\r\n\r\n    static async getInitialProps() {\r\n        const AllExchanges = await factory.methods.getDeployedExchanges().call();\r\n        // console.log(AllExchanges);\r\n        var requests = [];\r\n        var AllRequests = [];\r\n        var exchange = [];\r\n        var requestCount = 0;\r\n        if (AllExchanges.length != 0) {\r\n            for (var j = 0; j < AllExchanges.length; j++) {\r\n                exchange = Exchange(AllExchanges[j]);\r\n                requestCount = await exchange.methods.getRequestsCount().call();\r\n                requests = await Promise.all(\r\n                    Array(parseInt(requestCount)).fill().map((element, index) => {\r\n                        return exchange.methods.exchangeRequests(index).call()\r\n                    })\r\n                );\r\n                AllRequests.push.apply(AllRequests, requests);\r\n            }\r\n\r\n        }\r\n        console.log(AllExchanges);\r\n        console.log(AllRequests);\r\n        return { AllExchanges, AllRequests };\r\n\r\n    }\r\n\r\n    state = {\r\n        units: '',\r\n        price: '',\r\n        manager: '',\r\n        loading: false,\r\n        errorMessage: '',\r\n        accountAddress: ''\r\n        // cardsItems: {}\r\n    }\r\n\r\n\r\n    renderCard() {\r\n\r\n        if (this.props.AllExchanges.length != 0) {\r\n            const items = this.props.AllRequests.map((request, index) => {\r\n\r\n                if (this.state.accountAddress == request.manager) {\r\n                    return {\r\n                        header: request.units + ' Kw | ' + request.price + ' wei',\r\n                        description:\r\n                            <div>\r\n                                <div class=\"ui inverted divider\"></div>\r\n                                <div id={index}>\r\n                                    <Button disabled={request.complete} fluid\r\n                                        color=\"blue\"\r\n                                        basic\r\n                                        floated=\"right\"\r\n                                        onClick={this.onFinalize.bind(this, { index })}>\r\n                                        Finalize\r\n                        </Button></div> </div>,\r\n                        meta: 'Owner: ' + request.manager,\r\n                        fluid: true,\r\n                        style: { width: '500px' }\r\n                    };\r\n                }\r\n                else {\r\n                    return {\r\n                        header: request.units + ' Kw | ' + request.price + ' wei',\r\n                        description:\r\n                            <div>\r\n                                <div class=\"ui inverted divider\"></div>\r\n                                <div id={index}>\r\n                                    <Button disabled={request.complete} fluid\r\n                                        color=\"green\"\r\n                                        basic\r\n                                        floated=\"right\"\r\n                                        onClick={this.onSubmit.bind(this, { index })}>\r\n                                        Buy\r\n                        </Button></div> </div>,\r\n                        meta: 'Owner: ' + request.manager,\r\n                        fluid: true,\r\n                        style: { width: '500px' }\r\n                    };\r\n                }\r\n\r\n            });\r\n\r\n            // const cardsItems = await Promise.all(items).then((values) => {\r\n            //     console.log(values);\r\n            //     return values;\r\n            //   });\r\n\r\n            // this.setState({ cardsItems });\r\n\r\n            return <Card.Group items={items} />\r\n        }\r\n    }\r\n\r\n\r\n    onSubmit = async (event, id) => {\r\n        // event.preventDefault();\r\n        console.log(id.target.parentNode.id);\r\n        const indexofButtton = parseInt(id.target.parentNode.id);\r\n        const n = this.props.AllRequests[indexofButtton].ExchangeNo;\r\n        const exchange = Exchange(this.props.AllExchanges[n]);\r\n\r\n        const { price } = this.props.AllRequests[indexofButtton];\r\n\r\n        await ethereum.enable();\r\n        const accounts = await web3.eth.getAccounts();\r\n\r\n        await exchange.methods.contribute().send({\r\n            from: accounts[0],\r\n            value: parseInt(price)\r\n        });\r\n\r\n    }\r\n\r\n    onFinalize = async (event, id) => {\r\n        // event.preventDefault();\r\n        console.log(id.target.parentNode.id);\r\n        const indexofButtton = parseInt(id.target.parentNode.id);\r\n        const n = this.props.AllRequests[indexofButtton].ExchangeNo;\r\n        const exchange = Exchange(this.props.AllExchanges[n]);\r\n        var prevRequests = 0;\r\n        var requestCount = 0;\r\n        var currentExchange = [];\r\n\r\n        if (n > 0) {\r\n            for (var i = 0; i < n; i++) {\r\n                currentExchange = await Exchange(this.props.AllExchanges[i]);\r\n                requestCount = await currentExchange.methods.getRequestsCount().call();\r\n                prevRequests += requestCount;\r\n            }\r\n            indexofButtton = indexofButtton - prevRequests - 1;\r\n        }\r\n\r\n\r\n        await ethereum.enable();\r\n        const accounts = await web3.eth.getAccounts();\r\n\r\n\r\n        await exchange.methods.finalizeRequest(indexofButtton).send({\r\n            from: accounts[0]\r\n        });\r\n\r\n    }\r\n\r\n\r\n    render() {\r\n        return <div>\r\n            <Layout>\r\n\r\n                <h2>Pending Exchanges</h2>\r\n                <Link route=\"/Exchanges/new\">\r\n                    <a>\r\n                        <Button\r\n                            content='Create new Exchange'\r\n                            icon='add'\r\n                            primary\r\n                            floated=\"right\"\r\n                        />\r\n                    </a>\r\n                </Link>\r\n                {/* <Card.Group items={this.state.cardsItems}/> */}\r\n                {this.renderCard()}\r\n\r\n            </Layout>\r\n        </div>;\r\n    }\r\n}\r\n\r\nexport default ExchangeIndex;"]},"metadata":{},"sourceType":"module"}