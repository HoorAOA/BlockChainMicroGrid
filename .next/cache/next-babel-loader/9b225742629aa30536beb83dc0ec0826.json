{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component } from 'react';\nimport { Card, Button } from 'semantic-ui-react';\nimport factory from '../ethereum/factory';\nimport Layout from '../components/Layout';\nimport { Link } from '../routes';\nimport Exchange from '../ethereum/exchange';\nimport web3 from '../ethereum/web3'; // export default () => {\n//     return <h1>This is the index page</h1>;\n// };\n\nclass ExchangeIndex extends Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      units: '',\n      price: '',\n      manager: '',\n      loading: false,\n      errorMessage: '' // cardsItems: {}\n\n    });\n\n    _defineProperty(this, \"onSubmit\", async (event, id) => {\n      // event.preventDefault();\n      console.log(id.target.id);\n      const indexofButtton = parseInt(id.target.id); // this.state.indexofButtton = id.target.id;\n\n      const exchange = Exchange(this.props.TheAddress);\n      const {\n        price\n      } = this.props.requests[indexofButtton]; // this.setState({loading: true, errorMessage: ''});\n\n      await ethereum.enable();\n      const accounts = await web3.eth.getAccounts();\n      await exchange.methods.contribute().send({\n        from: accounts[0],\n        value: parseInt(price)\n      });\n    });\n\n    _defineProperty(this, \"onFinalize\", async (event, id) => {\n      // event.preventDefault();\n      console.log(id.target.id);\n      const indexofButtton = parseInt(id.target.id); // this.state.indexofButtton = id.target.id;\n\n      const exchange = Exchange(this.props.TheAddress); // this.setState({loading: true, errorMessage: ''});\n\n      await ethereum.enable();\n      const accounts = await web3.eth.getAccounts();\n      await exchange.methods.finalizeRequest(indexofButtton).send({\n        from: accounts[0]\n      });\n    });\n  }\n\n  static async getInitialProps() {\n    const AllExchanges = await factory.methods.getDeployedExchanges().call();\n    console.log(AllExchanges);\n    var requests = [];\n    var TheAddress = '';\n\n    if (AllExchanges.length != 0) {\n      TheAddress = AllExchanges[0];\n      const exchange = Exchange(AllExchanges[0]);\n      const requestCount = await exchange.methods.getRequestsCount().call();\n      requests = await Promise.all(Array(parseInt(requestCount)).fill().map((element, index) => {\n        return exchange.methods.exchangeRequests(index).call();\n      }));\n    }\n\n    return {\n      AllExchanges,\n      requests,\n      TheAddress\n    };\n  }\n\n  renderCard() {\n    if (this.props.AllExchanges.length != 0) {\n      const items = this.props.requests.map((request, index) => {\n        return {\n          header: request.units + 'Kw | ' + request.price + 'wei',\n          description: __jsx(\"div\", {\n            className: \"ui two buttons\",\n            id: index\n          }, __jsx(Button, {\n            color: \"green\",\n            basic: true,\n            floated: \"right\",\n            onClick: this.onSubmit.bind(this, {\n              index\n            })\n          }, \"Buy\"), __jsx(Button, {\n            disabled: request.complete,\n            color: \"blue\",\n            basic: true,\n            floated: \"right\",\n            onClick: this.onFinalize.bind(this, {\n              index\n            })\n          }, \"Finalize\")),\n          meta: 'Owner: ' + request.manager,\n          fluid: true\n        };\n      }); // const cardsItems = await Promise.all(items).then((values) => {\n      //     console.log(values);\n      //     return values;\n      //   });\n      // this.setState({ cardsItems });\n\n      return __jsx(Card.Group, {\n        items: items\n      });\n    }\n  }\n\n  render() {\n    return __jsx(\"div\", null, __jsx(Layout, null, __jsx(\"h2\", null, \"Pending Exchanges\"), __jsx(Link, {\n      route: \"/Exchanges/new\"\n    }, __jsx(\"a\", null, __jsx(Button, {\n      content: \"Create new Exchange\",\n      icon: \"add\",\n      primary: true,\n      floated: \"right\"\n    }))), this.renderCard()));\n  }\n\n}\n\nexport default ExchangeIndex;","map":{"version":3,"sources":["C:/Users/toshiba/Desktop/BlockChainMicroGrid/pages/index.js"],"names":["React","Component","Card","Button","factory","Layout","Link","Exchange","web3","ExchangeIndex","units","price","manager","loading","errorMessage","event","id","console","log","target","indexofButtton","parseInt","exchange","props","TheAddress","requests","ethereum","enable","accounts","eth","getAccounts","methods","contribute","send","from","value","finalizeRequest","getInitialProps","AllExchanges","getDeployedExchanges","call","length","requestCount","getRequestsCount","Promise","all","Array","fill","map","element","index","exchangeRequests","renderCard","items","request","header","description","onSubmit","bind","complete","onFinalize","meta","fluid","render"],"mappings":"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","sourcesContent":["import React , {Component} from 'react';\r\nimport {Card , Button} from 'semantic-ui-react';\r\nimport factory from '../ethereum/factory';\r\nimport Layout from '../components/Layout';\r\nimport { Link } from '../routes';\r\nimport Exchange from '../ethereum/exchange';\r\nimport web3 from '../ethereum/web3';\r\n\r\n// export default () => {\r\n//     return <h1>This is the index page</h1>;\r\n// };\r\n\r\nclass ExchangeIndex extends Component {\r\n\r\n    static async getInitialProps(){\r\n        const AllExchanges = await factory.methods.getDeployedExchanges().call();\r\n        console.log(AllExchanges);\r\n        var requests = [];\r\n        var TheAddress = '';\r\n        if (AllExchanges.length != 0 ){\r\n            TheAddress = AllExchanges[0];\r\n            const exchange = Exchange(AllExchanges[0]);\r\n            const requestCount = await exchange.methods.getRequestsCount().call();\r\n\r\n            requests = await Promise.all(\r\n                Array(parseInt(requestCount)).fill().map((element, index) => {\r\n                    return exchange.methods.exchangeRequests(index).call()\r\n                })\r\n            );\r\n\r\n            \r\n        }\r\n        \r\n        return { AllExchanges ,requests, TheAddress};\r\n        \r\n    }\r\n    \r\n    state = {\r\n        units: '',\r\n        price: '',\r\n        manager: '',\r\n        loading: false,\r\n        errorMessage:''\r\n        // cardsItems: {}\r\n    }\r\n\r\n    renderCard() {\r\n        if(this.props.AllExchanges.length != 0){\r\n        const items = this.props.requests.map( (request, index) => {\r\n            \r\n            return {\r\n                header: request.units + 'Kw | ' + request.price + 'wei' ,\r\n                    description: \r\n                    <div className='ui two buttons' id={index}>\r\n                    <Button   \r\n                        color= \"green\"\r\n                        basic \r\n                        floated=\"right\"\r\n                        onClick={ this.onSubmit.bind(this, {index})}> \r\n                        Buy\r\n                    </Button>\r\n                    <Button disabled={request.complete} \r\n                        color= \"blue\"\r\n                        basic \r\n                        floated=\"right\"\r\n                        onClick={this.onFinalize.bind(this, {index})}> \r\n                        Finalize\r\n                    </Button></div> ,\r\n                    meta: 'Owner: ' + request.manager ,\r\n                    fluid: true\r\n                };\r\n            });\r\n            \r\n            // const cardsItems = await Promise.all(items).then((values) => {\r\n            //     console.log(values);\r\n            //     return values;\r\n            //   });\r\n    \r\n        // this.setState({ cardsItems });\r\n\r\n        return <Card.Group items={items}/>\r\n        }\r\n     }\r\n\r\n    onSubmit = async (event, id) => {\r\n        // event.preventDefault();\r\n        console.log(id.target.id);\r\n        const indexofButtton = parseInt(id.target.id);\r\n        // this.state.indexofButtton = id.target.id;\r\n        const exchange = Exchange(this.props.TheAddress);\r\n\r\n        const {price} = this.props.requests[indexofButtton];\r\n\r\n        // this.setState({loading: true, errorMessage: ''});\r\n\r\n            await ethereum.enable();\r\n            const accounts = await web3.eth.getAccounts();\r\n            \r\n            await exchange.methods.contribute().send({\r\n                from : accounts[0],\r\n                value : parseInt(price)\r\n            });\r\n\r\n    }\r\n\r\n    onFinalize = async (event, id) => {\r\n        // event.preventDefault();\r\n        console.log(id.target.id);\r\n        const indexofButtton = parseInt(id.target.id);\r\n        // this.state.indexofButtton = id.target.id;\r\n        const exchange = Exchange(this.props.TheAddress);\r\n\r\n\r\n        // this.setState({loading: true, errorMessage: ''});\r\n\r\n            await ethereum.enable();\r\n            const accounts = await web3.eth.getAccounts();\r\n            \r\n\r\n            await exchange.methods.finalizeRequest(indexofButtton).send({\r\n                from : accounts[0]\r\n            });\r\n    \r\n    }\r\n\r\n    render() {\r\n    return <div>\r\n        <Layout>\r\n\r\n            <h2>Pending Exchanges</h2>\r\n            <Link route=\"/Exchanges/new\">\r\n                <a>\r\n                    <Button \r\n                        content='Create new Exchange' \r\n                        icon='add' \r\n                        primary \r\n                        floated=\"right\" \r\n                    />\r\n                </a>\r\n            </Link>\r\n            {/* <Card.Group items={this.state.cardsItems}/> */}\r\n               {this.renderCard()}\r\n                \r\n        </Layout>\r\n        </div>;\r\n    }\r\n}\r\n\r\nexport default ExchangeIndex;"]},"metadata":{},"sourceType":"module"}