{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport { Card, Button } from 'semantic-ui-react';\nimport factory from '../ethereum/factory';\nimport Layout from '../components/Layout';\nimport { Link } from '../routes';\nimport Exchange from '../ethereum/exchange'; // export default () => {\n//     return <h1>This is the index page</h1>;\n// };\n\nvar ExchangeIndex = /*#__PURE__*/function (_Component) {\n  _inherits(ExchangeIndex, _Component);\n\n  var _super = _createSuper(ExchangeIndex);\n\n  function ExchangeIndex() {\n    var _this;\n\n    _classCallCheck(this, ExchangeIndex);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      units: '',\n      price: '',\n      manager: '',\n      loading: false,\n      errorMessage: '' // cardsItems: {}\n\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onSubmit\", /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(event, id) {\n        var exchange, accounts;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                // event.preventDefault();\n                console.log(id);\n                exchange = Exchange(_this.props.address); // const { manager, units, price} = exchange;\n\n                _this.setState({\n                  loading: true,\n                  errorMessage: ''\n                });\n\n                _context.prev = 3;\n                _context.next = 6;\n                return ethereum.enable();\n\n              case 6:\n                _context.next = 8;\n                return web3.eth.getAccounts();\n\n              case 8:\n                accounts = _context.sent;\n                _context.next = 11;\n                return exchange.methods.FinalizeExchange(id).send({\n                  from: accounts[0]\n                });\n\n              case 11:\n                Router.pushRoute(\"/\");\n                _context.next = 17;\n                break;\n\n              case 14:\n                _context.prev = 14;\n                _context.t0 = _context[\"catch\"](3);\n\n                _this.setState({\n                  errorMessage: _context.t0.message\n                });\n\n              case 17:\n                _context.prev = 17;\n\n                _this.setState({\n                  loading: false\n                });\n\n                return _context.finish(17);\n\n              case 20:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, null, [[3, 14, 17, 20]]);\n      }));\n\n      return function (_x, _x2) {\n        return _ref.apply(this, arguments);\n      };\n    }());\n\n    return _this;\n  }\n\n  _createClass(ExchangeIndex, [{\n    key: \"renderCard\",\n    value: function renderCard() {\n      var _this2 = this;\n\n      if (this.props.AllExchanges.length != 0) {\n        var items = this.props.requests.map(function (request, index) {\n          // const exchange = Exchange(address);\n          // const summary = await exchange.methods.getSummary().call();\n          //     // console.log(summary);\n          return {\n            header: request.units + 'Kw | ' + request.price + 'wei',\n            description: __jsx(Button, {\n              disabled: request.complete,\n              loading: _this2.state.loading,\n              color: \"green\",\n              basic: true,\n              floated: \"right\",\n              id: index,\n              onClick: _this2.onSubmit.bind(_this2, {\n                index: index\n              })\n            }, \"BUY\"),\n            meta: 'Owner: ' + request.manager,\n            fluid: true\n          };\n        }); // const cardsItems = await Promise.all(items).then((values) => {\n        //     console.log(values);\n        //     return values;\n        //   });\n        // this.setState({ cardsItems });\n\n        return __jsx(Card.Group, {\n          items: items\n        });\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return __jsx(\"div\", null, __jsx(Layout, null, __jsx(\"h2\", null, \"Pending Exchanges\"), __jsx(Link, {\n        route: \"/Exchanges/new\"\n      }, __jsx(\"a\", null, __jsx(Button, {\n        content: \"Create new Exchange\",\n        icon: \"add\",\n        primary: true,\n        floated: \"right\"\n      }))), this.renderCard()));\n    }\n  }], [{\n    key: \"getInitialProps\",\n    value: function () {\n      var _getInitialProps = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        var AllExchanges, address, exchange, requestCount, requests;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return factory.methods.getDeployedExchanges().call();\n\n              case 2:\n                AllExchanges = _context2.sent;\n                console.log(AllExchanges);\n\n                if (!(AllExchanges.length != 0)) {\n                  _context2.next = 14;\n                  break;\n                }\n\n                address = AllExchanges[0];\n                exchange = Exchange(AllExchanges[0]);\n                _context2.next = 9;\n                return exchange.methods.getRequestsCount().call();\n\n              case 9:\n                requestCount = _context2.sent;\n                _context2.next = 12;\n                return Promise.all(Array(parseInt(requestCount)).fill().map(function (element, index) {\n                  return exchange.methods.exchangeRequest(index).call();\n                }));\n\n              case 12:\n                requests = _context2.sent;\n                return _context2.abrupt(\"return\", {\n                  AllExchanges: AllExchanges,\n                  requests: requests,\n                  address: address\n                });\n\n              case 14:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      function getInitialProps() {\n        return _getInitialProps.apply(this, arguments);\n      }\n\n      return getInitialProps;\n    }()\n  }]);\n\n  return ExchangeIndex;\n}(Component);\n\nexport default ExchangeIndex;","map":{"version":3,"sources":["C:/Users/toshiba/Desktop/BlockChainMicroGrid/pages/index.js"],"names":["React","Component","Card","Button","factory","Layout","Link","Exchange","ExchangeIndex","units","price","manager","loading","errorMessage","event","id","console","log","exchange","props","address","setState","ethereum","enable","web3","eth","getAccounts","accounts","methods","FinalizeExchange","send","from","Router","pushRoute","message","AllExchanges","length","items","requests","map","request","index","header","description","complete","state","onSubmit","bind","meta","fluid","renderCard","getDeployedExchanges","call","getRequestsCount","requestCount","Promise","all","Array","parseInt","fill","element","exchangeRequest"],"mappings":"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","sourcesContent":["import React , {Component} from 'react';\r\nimport {Card , Button} from 'semantic-ui-react';\r\nimport factory from '../ethereum/factory';\r\nimport Layout from '../components/Layout';\r\nimport { Link } from '../routes';\r\nimport Exchange from '../ethereum/exchange';\r\n\r\n// export default () => {\r\n//     return <h1>This is the index page</h1>;\r\n// };\r\n\r\nclass ExchangeIndex extends Component {\r\n\r\n    static async getInitialProps(){\r\n        const AllExchanges = await factory.methods.getDeployedExchanges().call();\r\n        console.log(AllExchanges);\r\n        if (AllExchanges.length != 0 ){\r\n           const address = AllExchanges[0];\r\n            const exchange = Exchange(AllExchanges[0]);\r\n            const requestCount = await exchange.methods.getRequestsCount().call();\r\n\r\n            const requests = await Promise.all(\r\n                Array(parseInt(requestCount)).fill().map((element, index) => {\r\n                    return exchange.methods.exchangeRequest(index).call()\r\n                })\r\n            );\r\n            return { AllExchanges ,requests , address};\r\n        }\r\n        \r\n\r\n        \r\n    }\r\n    \r\n    state = {\r\n        units: '',\r\n        price: '',\r\n        manager: '',\r\n        loading: false,\r\n        errorMessage:''\r\n        // cardsItems: {}\r\n    }\r\n\r\n    renderCard() {\r\n        if(this.props.AllExchanges.length != 0){\r\n        const items = this.props.requests.map( (request, index) => {\r\n\r\n            // const exchange = Exchange(address);\r\n            // const summary = await exchange.methods.getSummary().call();\r\n            //     // console.log(summary);\r\n            return {\r\n                    header: request.units + 'Kw | ' + request.price + 'wei' ,\r\n                    description: \r\n                    <Button disabled={request.complete}  \r\n                        loading = {this.state.loading}\r\n                        color= \"green\"\r\n                        basic \r\n                        floated=\"right\"\r\n                        id={index}\r\n                        onClick={this.onSubmit.bind(this, {index})}> \r\n                        BUY\r\n                    </Button>\r\n                    ,\r\n                    meta: 'Owner: ' + request.manager ,\r\n                    fluid: true\r\n                };\r\n            });\r\n            \r\n            // const cardsItems = await Promise.all(items).then((values) => {\r\n            //     console.log(values);\r\n            //     return values;\r\n            //   });\r\n    \r\n        // this.setState({ cardsItems });\r\n\r\n        return <Card.Group items={items}/>\r\n        }\r\n     }\r\n\r\n    onSubmit = async (event, id) => {\r\n        // event.preventDefault();\r\n        console.log(id);\r\n        const exchange = Exchange(this.props.address);\r\n        // const { manager, units, price} = exchange;\r\n\r\n        this.setState({loading: true, errorMessage: ''});\r\n\r\n        try {\r\n            await ethereum.enable();\r\n            const accounts = await web3.eth.getAccounts();\r\n            \r\n            await exchange.methods.FinalizeExchange(id).send({\r\n                from : accounts[0]\r\n            });\r\n    \r\n\r\n        Router.pushRoute(`/`)\r\n        } catch (err) {\r\n\r\n            this.setState({ errorMessage: err.message});\r\n        }\r\n        finally{\r\n\r\n            this.setState({ loading: false});\r\n        }\r\n    }\r\n\r\n\r\n    render() {\r\n    return <div>\r\n        <Layout>\r\n\r\n            <h2>Pending Exchanges</h2>\r\n            <Link route=\"/Exchanges/new\">\r\n                <a>\r\n                    <Button \r\n                        content='Create new Exchange' \r\n                        icon='add' \r\n                        primary \r\n                        floated=\"right\" \r\n                    />\r\n                </a>\r\n            </Link>\r\n            {/* <Card.Group items={this.state.cardsItems}/> */}\r\n               {this.renderCard()}\r\n                \r\n        </Layout>\r\n        </div>;\r\n    }\r\n}\r\n\r\nexport default ExchangeIndex;"]},"metadata":{},"sourceType":"module"}