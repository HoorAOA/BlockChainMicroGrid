{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component } from 'react';\nimport { Card, Button } from 'semantic-ui-react';\nimport factory from '../ethereum/factory';\nimport Layout from '../components/Layout';\nimport { Link } from '../routes';\nimport Exchange from '../ethereum/exchange'; // export default () => {\n//     return <h1>This is the index page</h1>;\n// };\n\nclass ExchangeIndex extends Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      units: '',\n      price: '',\n      manager: '',\n      items: items,\n      loading: false,\n      errorMessage: ''\n    });\n\n    _defineProperty(this, \"onSubmit\", async event => {\n      event.preventDefault();\n      const exchange = Exchange(this.props.address);\n      const {\n        manager,\n        units,\n        price\n      } = this.state;\n      this.setState({\n        loading: true,\n        errorMessage: ''\n      });\n\n      try {\n        await ethereum.enable();\n        const accounts = await web3.eth.getAccounts();\n        await exchange.methods.FinalizeExchange(this.props.id).send({\n          from: accounts[0]\n        });\n        Router.pushRoute(`/`);\n      } catch (err) {\n        this.setState({\n          errorMessage: err.message\n        });\n      } finally {\n        this.setState({\n          loading: false\n        });\n      }\n    });\n  }\n\n  static async getInitialProps(props) {\n    const exchanges = await factory.methods.getDeployedExchanges().call();\n    const {\n      address\n    } = props.query;\n    const items = this.props.exchanges.map(async address => {\n      const exchange = Exchange(address);\n      const summary = await exchange.methods.getSummary().call(); // console.log(summary);\n\n      return {\n        header: address,\n        description: __jsx(Button, {\n          disabled: exchange.complete,\n          color: \"green\",\n          basic: true,\n          floated: \"right\",\n          onClick: this.onSubmit\n        }, \"BUY\"),\n        meta: summary[0] + 'Kw For ' + summary[1] + 'SDG',\n        fluid: true\n      };\n    });\n    Promise.all(items);\n    return {\n      exchanges,\n      address,\n      items\n    };\n  }\n\n  // renderExchanges() {\n  //     const items = this.props.exchanges.map(async (address) => {\n  //     const exchange = Exchange(address);\n  //     const summary = await exchange.methods.getSummary().call();\n  //         // console.log(summary);\n  //     return {\n  //             header: address,\n  //             description: \n  //             <Button disabled={exchange.complete} \n  //                 color=\"green\" \n  //                 basic \n  //                 floated=\"right\"\n  //                 onClick={this.onSubmit}> \n  //                 BUY\n  //             </Button>\n  //             ,\n  //             meta:  summary[0] + 'Kw For ' + summary[1] + 'SDG',\n  //             fluid: true\n  //         };\n  //     });\n  //     Promise.all(items);\n  //     console.log(items);\n  //     return <Card.Group items={items}/>;\n  // }\n  render() {\n    return __jsx(\"div\", null, __jsx(Layout, null, __jsx(\"h2\", null, \"Pending Exchanges\"), __jsx(Link, {\n      route: \"/Exchanges/new\"\n    }, __jsx(\"a\", null, __jsx(Button, {\n      content: \"Create new Exchange\",\n      icon: \"add\",\n      primary: true,\n      floated: \"right\"\n    }))), __jsx(Card.Group, {\n      items: items\n    })));\n  }\n\n}\n\nexport default ExchangeIndex;","map":{"version":3,"sources":["C:/Users/toshiba/Desktop/BlockChainMicroGrid/pages/index.js"],"names":["React","Component","Card","Button","factory","Layout","Link","Exchange","ExchangeIndex","units","price","manager","items","loading","errorMessage","event","preventDefault","exchange","props","address","state","setState","ethereum","enable","accounts","web3","eth","getAccounts","methods","FinalizeExchange","id","send","from","Router","pushRoute","err","message","getInitialProps","exchanges","getDeployedExchanges","call","query","map","summary","getSummary","header","description","complete","onSubmit","meta","fluid","Promise","all","render"],"mappings":"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","sourcesContent":["import React , {Component} from 'react';\r\nimport {Card , Button} from 'semantic-ui-react';\r\nimport factory from '../ethereum/factory';\r\nimport Layout from '../components/Layout';\r\nimport { Link } from '../routes';\r\nimport Exchange from '../ethereum/exchange';\r\n\r\n// export default () => {\r\n//     return <h1>This is the index page</h1>;\r\n// };\r\n\r\nclass ExchangeIndex extends Component {\r\n\r\n    static async getInitialProps(props){\r\n        const exchanges = await factory.methods.getDeployedExchanges().call();\r\n        const {address} = props.query;\r\n\r\n        const items = this.props.exchanges.map(async (address) => {\r\n\r\n            const exchange = Exchange(address);\r\n            const summary = await exchange.methods.getSummary().call();\r\n                // console.log(summary);\r\n            return {\r\n                    header: address,\r\n                    description: \r\n                    <Button disabled={exchange.complete} \r\n                        color=\"green\" \r\n                        basic \r\n                        floated=\"right\"\r\n                        onClick={this.onSubmit}> \r\n                        BUY\r\n                    </Button>\r\n                    ,\r\n                    meta:  summary[0] + 'Kw For ' + summary[1] + 'SDG',\r\n                    fluid: true\r\n                };\r\n            });\r\n            Promise.all(items);\r\n        return { exchanges , address, items};\r\n    }\r\n\r\n    state = {\r\n        units: '',\r\n        price: '',\r\n        manager: '',\r\n        items:items,\r\n        loading: false,\r\n        errorMessage:''\r\n    }\r\n\r\n    onSubmit = async event => {\r\n        event.preventDefault();\r\n\r\n        const exchange = Exchange(this.props.address);\r\n        const { manager, units, price} = this.state;\r\n\r\n        this.setState({loading: true, errorMessage: ''});\r\n\r\n        try {\r\n            await ethereum.enable();\r\n            const accounts = await web3.eth.getAccounts();\r\n            await exchange.methods.FinalizeExchange(this.props.id).send({\r\n                from : accounts[0]\r\n            });\r\n    \r\n\r\n        Router.pushRoute(`/`)\r\n        } catch (err) {\r\n\r\n            this.setState({ errorMessage: err.message});\r\n        }\r\n        finally{\r\n\r\n            this.setState({ loading: false});\r\n        }\r\n    }\r\n\r\n    \r\n\r\n    // renderExchanges() {\r\n        \r\n    //     const items = this.props.exchanges.map(async (address) => {\r\n\r\n    //     const exchange = Exchange(address);\r\n    //     const summary = await exchange.methods.getSummary().call();\r\n    //         // console.log(summary);\r\n    //     return {\r\n    //             header: address,\r\n    //             description: \r\n    //             <Button disabled={exchange.complete} \r\n    //                 color=\"green\" \r\n    //                 basic \r\n    //                 floated=\"right\"\r\n    //                 onClick={this.onSubmit}> \r\n    //                 BUY\r\n    //             </Button>\r\n    //             ,\r\n    //             meta:  summary[0] + 'Kw For ' + summary[1] + 'SDG',\r\n    //             fluid: true\r\n    //         };\r\n    //     });\r\n    //     Promise.all(items);\r\n    //     console.log(items);\r\n\r\n    //     return <Card.Group items={items}/>;\r\n    // }\r\n    render() {\r\n    return <div>\r\n        <Layout>\r\n\r\n            <h2>Pending Exchanges</h2>\r\n            <Link route=\"/Exchanges/new\">\r\n                <a>\r\n                    <Button \r\n                        content='Create new Exchange' \r\n                        icon='add' \r\n                        primary \r\n                        floated=\"right\" \r\n                    />\r\n                </a>\r\n            </Link>\r\n            {/* {this.renderExchanges()} */}\r\n            <Card.Group items={items}/>\r\n                \r\n        </Layout>\r\n        </div>;\r\n    }\r\n}\r\n\r\nexport default ExchangeIndex;"]},"metadata":{},"sourceType":"module"}