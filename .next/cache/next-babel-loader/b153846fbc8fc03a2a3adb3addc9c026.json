{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component } from 'react';\nimport { Card, Button } from 'semantic-ui-react';\nimport factory from '../ethereum/factory';\nimport Layout from '../components/Layout';\nimport { Link } from '../routes';\nimport Exchange from '../ethereum/exchange';\nimport web3 from '../ethereum/web3';\n\nclass ExchangeIndex extends Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      units: '',\n      price: '',\n      manager: '',\n      loading: false,\n      errorMessage: '',\n      accountAddress: '' // cardsItems: {}\n\n    });\n\n    _defineProperty(this, \"onSubmit\", async (event, id) => {\n      // event.preventDefault();\n      console.log(id.target.parentNode.id);\n      const indexofButtton = parseInt(id.target.parentNode.id);\n      const n = this.props.AllRequests[indexofButtton].ExchangeNo;\n      const exchange = Exchange(this.props.AllExchanges[n]);\n      const {\n        price\n      } = this.props.AllRequests[indexofButtton];\n      await ethereum.enable();\n      const accounts = await web3.eth.getAccounts();\n      await exchange.methods.contribute().send({\n        from: accounts[0],\n        value: parseInt(price)\n      });\n    });\n\n    _defineProperty(this, \"onFinalize\", async (event, id) => {\n      // event.preventDefault();\n      console.log(id.target.parentNode.id);\n      var indexofButtton = parseInt(id.target.parentNode.id);\n      const n = this.props.AllRequests[indexofButtton].ExchangeNo;\n      const exchange = Exchange(this.props.AllExchanges[n]);\n      var prevRequests = 0;\n      var requestCount = 0;\n      var currentExchange = [];\n\n      if (n > 0) {\n        for (var i = 0; i < n; i++) {\n          currentExchange = await Exchange(this.props.AllExchanges[i]);\n          requestCount = await currentExchange.methods.getRequestsCount().call();\n          prevRequests += ParseInt(requestCount);\n        }\n\n        indexofButtton = ParseInt(indexofButtton) - prevRequests - 1;\n      }\n\n      await ethereum.enable();\n      const accounts = await web3.eth.getAccounts();\n      await exchange.methods.finalizeRequest(indexofButtton).send({\n        from: accounts[0]\n      });\n    });\n  }\n\n  async componentDidMount() {\n    await ethereum.enable();\n    const accounts = await web3.eth.getAccounts();\n    this.setState({\n      accountAddress: accounts[0]\n    });\n  }\n\n  static async getInitialProps() {\n    const AllExchanges = await factory.methods.getDeployedExchanges().call(); // console.log(AllExchanges);\n\n    var requests = [];\n    var AllRequests = [];\n    var exchange = [];\n    var requestCount = 0;\n\n    if (AllExchanges.length != 0) {\n      for (var j = 0; j < AllExchanges.length; j++) {\n        exchange = Exchange(AllExchanges[j]);\n        requestCount = await exchange.methods.getRequestsCount().call();\n        requests = await Promise.all(Array(parseInt(requestCount)).fill().map((element, index) => {\n          return exchange.methods.exchangeRequests(index).call();\n        }));\n        AllRequests.push.apply(AllRequests, requests);\n      }\n    }\n\n    console.log(AllExchanges);\n    console.log(AllRequests);\n    return {\n      AllExchanges,\n      AllRequests\n    };\n  }\n\n  renderCard() {\n    if (this.props.AllExchanges.length != 0) {\n      const items = this.props.AllRequests.map((request, index) => {\n        if (this.state.accountAddress == request.manager) {\n          return {\n            header: request.units + ' Kw | ' + request.price + ' wei',\n            description: __jsx(\"div\", null, __jsx(\"div\", {\n              class: \"ui inverted divider\"\n            }), __jsx(\"div\", {\n              id: index\n            }, __jsx(Button, {\n              disabled: request.complete,\n              fluid: true,\n              color: \"blue\",\n              basic: true,\n              floated: \"right\",\n              onClick: this.onFinalize.bind(this, {\n                index\n              })\n            }, \"Finalize\")), \" \"),\n            meta: 'Owner: ' + request.manager,\n            fluid: true,\n            style: {\n              width: '500px'\n            }\n          };\n        } else {\n          return {\n            header: request.units + ' Kw | ' + request.price + ' wei',\n            description: __jsx(\"div\", null, __jsx(\"div\", {\n              class: \"ui inverted divider\"\n            }), __jsx(\"div\", {\n              id: index\n            }, __jsx(Button, {\n              disabled: request.complete,\n              fluid: true,\n              color: \"green\",\n              basic: true,\n              floated: \"right\",\n              onClick: this.onSubmit.bind(this, {\n                index\n              })\n            }, \"Buy\")), \" \"),\n            meta: 'Owner: ' + request.manager,\n            fluid: true,\n            style: {\n              width: '500px'\n            }\n          };\n        }\n      }); // const cardsItems = await Promise.all(items).then((values) => {\n      //     console.log(values);\n      //     return values;\n      //   });\n      // this.setState({ cardsItems });\n\n      return __jsx(Card.Group, {\n        items: items\n      });\n    }\n  }\n\n  render() {\n    return __jsx(\"div\", null, __jsx(Layout, null, __jsx(\"h2\", null, \"Pending Exchanges\"), __jsx(Link, {\n      route: \"/Exchanges/new\"\n    }, __jsx(\"a\", null, __jsx(Button, {\n      content: \"Create new Exchange\",\n      icon: \"add\",\n      primary: true,\n      floated: \"right\"\n    }))), this.renderCard()));\n  }\n\n}\n\nexport default ExchangeIndex;","map":{"version":3,"sources":["C:/Users/toshiba/Desktop/Elex22/BlockChainMicroGrid/pages/index.js"],"names":["React","Component","Card","Button","factory","Layout","Link","Exchange","web3","ExchangeIndex","units","price","manager","loading","errorMessage","accountAddress","event","id","console","log","target","parentNode","indexofButtton","parseInt","n","props","AllRequests","ExchangeNo","exchange","AllExchanges","ethereum","enable","accounts","eth","getAccounts","methods","contribute","send","from","value","prevRequests","requestCount","currentExchange","i","getRequestsCount","call","ParseInt","finalizeRequest","componentDidMount","setState","getInitialProps","getDeployedExchanges","requests","length","j","Promise","all","Array","fill","map","element","index","exchangeRequests","push","apply","renderCard","items","request","state","header","description","complete","onFinalize","bind","meta","fluid","style","width","onSubmit","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { Card, Button } from 'semantic-ui-react';\r\nimport factory from '../ethereum/factory';\r\nimport Layout from '../components/Layout';\r\nimport { Link } from '../routes';\r\nimport Exchange from '../ethereum/exchange';\r\nimport web3 from '../ethereum/web3';\r\n\r\n\r\nclass ExchangeIndex extends Component {\r\n\r\n\r\n    async componentDidMount() {\r\n        await ethereum.enable();\r\n        const accounts = await web3.eth.getAccounts();\r\n\r\n        this.setState({\r\n            accountAddress: accounts[0]\r\n        });\r\n    }\r\n\r\n    static async getInitialProps() {\r\n        const AllExchanges = await factory.methods.getDeployedExchanges().call();\r\n        // console.log(AllExchanges);\r\n        var requests = [];\r\n        var AllRequests = [];\r\n        var exchange = [];\r\n        var requestCount = 0;\r\n        if (AllExchanges.length != 0) {\r\n            for (var j = 0; j < AllExchanges.length; j++) {\r\n                exchange = Exchange(AllExchanges[j]);\r\n                requestCount = await exchange.methods.getRequestsCount().call();\r\n                requests = await Promise.all(\r\n                    Array(parseInt(requestCount)).fill().map((element, index) => {\r\n                        return exchange.methods.exchangeRequests(index).call()\r\n                    })\r\n                );\r\n                AllRequests.push.apply(AllRequests, requests);\r\n            }\r\n\r\n        }\r\n        console.log(AllExchanges);\r\n        console.log(AllRequests);\r\n        return { AllExchanges, AllRequests };\r\n\r\n    }\r\n\r\n    state = {\r\n        units: '',\r\n        price: '',\r\n        manager: '',\r\n        loading: false,\r\n        errorMessage: '',\r\n        accountAddress: ''\r\n        // cardsItems: {}\r\n    }\r\n\r\n\r\n    renderCard() {\r\n\r\n        if (this.props.AllExchanges.length != 0) {\r\n            const items = this.props.AllRequests.map((request, index) => {\r\n\r\n                if (this.state.accountAddress == request.manager) {\r\n                    return {\r\n                        header: request.units + ' Kw | ' + request.price + ' wei',\r\n                        description:\r\n                            <div>\r\n                                <div class=\"ui inverted divider\"></div>\r\n                                <div id={index}>\r\n                                    <Button disabled={request.complete} fluid\r\n                                        color=\"blue\"\r\n                                        basic\r\n                                        floated=\"right\"\r\n                                        onClick={this.onFinalize.bind(this, { index })}>\r\n                                        Finalize\r\n                        </Button></div> </div>,\r\n                        meta: 'Owner: ' + request.manager,\r\n                        fluid: true,\r\n                        style: { width: '500px' }\r\n                    };\r\n                }\r\n                else {\r\n                    return {\r\n                        header: request.units + ' Kw | ' + request.price + ' wei',\r\n                        description:\r\n                            <div>\r\n                                <div class=\"ui inverted divider\"></div>\r\n                                <div id={index}>\r\n                                    <Button disabled={request.complete} fluid\r\n                                        color=\"green\"\r\n                                        basic\r\n                                        floated=\"right\"\r\n                                        onClick={this.onSubmit.bind(this, { index })}>\r\n                                        Buy\r\n                        </Button></div> </div>,\r\n                        meta: 'Owner: ' + request.manager,\r\n                        fluid: true,\r\n                        style: { width: '500px' }\r\n                    };\r\n                }\r\n\r\n            });\r\n\r\n            // const cardsItems = await Promise.all(items).then((values) => {\r\n            //     console.log(values);\r\n            //     return values;\r\n            //   });\r\n\r\n            // this.setState({ cardsItems });\r\n\r\n            return <Card.Group items={items} />\r\n        }\r\n    }\r\n\r\n\r\n    onSubmit = async (event, id) => {\r\n        // event.preventDefault();\r\n        console.log(id.target.parentNode.id);\r\n        const indexofButtton = parseInt(id.target.parentNode.id);\r\n        const n = this.props.AllRequests[indexofButtton].ExchangeNo;\r\n        const exchange = Exchange(this.props.AllExchanges[n]);\r\n\r\n        const { price } = this.props.AllRequests[indexofButtton];\r\n\r\n        await ethereum.enable();\r\n        const accounts = await web3.eth.getAccounts();\r\n\r\n        await exchange.methods.contribute().send({\r\n            from: accounts[0],\r\n            value: parseInt(price)\r\n        });\r\n\r\n    }\r\n\r\n    onFinalize = async (event, id) => {\r\n        // event.preventDefault();\r\n        console.log(id.target.parentNode.id);\r\n        var indexofButtton = parseInt(id.target.parentNode.id);\r\n        const n = this.props.AllRequests[indexofButtton].ExchangeNo;\r\n        const exchange = Exchange(this.props.AllExchanges[n]);\r\n        var prevRequests = 0;\r\n        var requestCount = 0;\r\n        var currentExchange = [];\r\n\r\n        if (n > 0) {\r\n            for (var i = 0; i < n; i++) {\r\n                currentExchange = await Exchange(this.props.AllExchanges[i]);\r\n                requestCount = await currentExchange.methods.getRequestsCount().call();\r\n                prevRequests += ParseInt(requestCount);\r\n            }\r\n            indexofButtton = ParseInt(indexofButtton) - prevRequests - 1;\r\n        }\r\n\r\n\r\n        await ethereum.enable();\r\n        const accounts = await web3.eth.getAccounts();\r\n\r\n\r\n        await exchange.methods.finalizeRequest(indexofButtton).send({\r\n            from: accounts[0]\r\n        });\r\n\r\n    }\r\n\r\n\r\n    render() {\r\n        return <div>\r\n            <Layout>\r\n\r\n                <h2>Pending Exchanges</h2>\r\n                <Link route=\"/Exchanges/new\">\r\n                    <a>\r\n                        <Button\r\n                            content='Create new Exchange'\r\n                            icon='add'\r\n                            primary\r\n                            floated=\"right\"\r\n                        />\r\n                    </a>\r\n                </Link>\r\n                {/* <Card.Group items={this.state.cardsItems}/> */}\r\n                {this.renderCard()}\r\n\r\n            </Layout>\r\n        </div>;\r\n    }\r\n}\r\n\r\nexport default ExchangeIndex;"]},"metadata":{},"sourceType":"module"}